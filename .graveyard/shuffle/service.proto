syntax = "proto3";

package shuffle;

import "gogoproto/gogo.proto";
import "broker/protocol/protocol.proto";

option go_package = "shuffle";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.protosizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

message Config {
    option (gogoproto.equal) = true;

    message Processor {
        option (gogoproto.equal) = true;

        uint64 min_msg_clock = 1 [(gogoproto.casttype) = "go.gazette.dev/core/message.Clock"];
        uint64 max_msg_clock = 2 [(gogoproto.casttype) = "go.gazette.dev/core/message.Clock"];
    }
    repeated Processor processors = 1 [(gogoproto.nullable) = false];
    // JSON-Pointer to the message UUID.
    string uuid_json_ptr = 2;
    // Composite key over which shuffling occurs, specified as one or more
    // JSON-Pointers indicating a message location to extract.
    repeated string shuffle_key_ptr = 3;
    // Number of top-ranked processors to broadcast each message to, after shuffling.
    // Usually this is one. If non-zero, |choose_from| cannot be set.
    uint32 broadcast_to = 4;
    // Number of top-ranked processors from which a single processor will be
    // randomly selected, after shuffling. This final selection is deterministic,
    // being derived from the message clock time. Larger values can help
    // distribute the effect of "hot keys" which would otherwise overwhelm
    // specific processors. Usually this is zero, as |broadcast_to| is used
    // instead. If non-zero, |broadcast_to| cannot also be set.
    uint32 choose_from = 5;
}

message Request {
    option (gogoproto.equal) = true;

    // Configuration under which shuffling is to occur.
    Config config = 1 [(gogoproto.nullable) = false];
    // Index of this reader within the shuffle topology.
    int32 shuffle_index = 2;
    // Nominal ReadRequest whose response is to be shuffled.
    protocol.ReadRequest read_request = 3 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

service Shuffle {
    // Subscribe a Shard to read a Journal.
    rpc Read(Request) returns (stream protocol.ReadResponse);
}