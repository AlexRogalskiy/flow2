nodeDependencies:
  moment: "^2.24"

collections:
  - name: stock/ticks
    schema: schemas/L1-tick.yaml
    key: [/id]

    projections:
      exchange:
        location: /exchange
        partition: true
      the_bid_price: /bid/price

  - name: stock/daily-stats
    schema: schemas/daily-stat.yaml
    key: [/security, /date]

    projections:
      my_special_column: /bid
      exchange:
        location: /exchange
        partition: true

    derivation:
      bootstrap:
        - nodeJS: console.error("example of a bootstrap!");
      transform:
        fromTicks:
          source:
            name: stock/ticks
            schema: "schemas/L1-tick.yaml#/$defs/withRequired"
            partitions:
              include:
                exchange: [NYSE, NASDAQ]

          publish:
            nodeJS: |
              // Alias "source" document to "tick".
              let tick = source;
              // Current bid/ask price spread of the tick.
              let spread = tick.ask.price - tick.bid.price;
              // Truncate full UTC timestamp to current date.
              let date = moment.utc(tick.time).format("YYYY-MM-DD");

              return [{
                  exchange: tick.exchange,
                  security: tick.security,
                  date:     date,
                  // Price stat uses a by-volume weighted average of trades.
                  price: {
                      low:  tick.last.price,
                      high: tick.last.price,
                      avgN: tick.last.price * tick.last.size,
                      avgD: tick.last.size,
                  },
                  // Bid, ask, and spread stats use equal weighting of observed prices across ticks.
                  bid: {
                      low:  tick.bid.price,
                      high: tick.bid.price,
                      avgN: tick.bid.price,
                      avgD: 1,
                  },
                  ask: {
                      low:  tick.ask.price,
                      high: tick.ask.price,
                      avgN: tick.ask.price,
                      avgD: 1,
                  },
                  spread: {low: spread, high: spread, avgN: spread, avgD: 1},
                  volume: tick.last.size,
                  first:  tick.last,
                  last:   tick.last,
              }];

materializations:
  dailyStatsPostgres:
    collection: stock/daily-stats
    postgres:
      uri: postgres://127.0.0.1:5432/my-db
      table: daily_stats

tests:
  "stock/daily-stats rolls up from stock/ticks":
    - ingest:
        stock/ticks:
        - exchange: NYSE
          security: APPL
          time: "2019-01-16T12:34:56Z"
          bid:  {"price": 321.09, "size": 100}
          ask:  {"price": 321.45, "size": 200}
          last: {"price": 321.12, "size": 50}
        - exchange: NYSE
          security: APPL
          time: "2019-01-16T12:34:58Z"
          bid:  {"price": 321.10, "size": 150}
          ask:  {"price": 321.44, "size": 100}
          last: {"price": 321.15, "size": 75}
    - verify:
        stock/daily-stats/exchange=NYSE:
        - exchange: NYSE
          security: APPL
          date:    "2019-01-16"
          price:  { "low": 321.12, "high": 321.12, "avgN":  16056, "avgD": 50 }
          bid:    { "low": 321.09, "high": 321.09, "avgN": 321.09, "avgD": 1 }
          ask:    { "low": 321.45, "high": 321.45, "avgN": 321.45, "avgD": 1 }
          spread: { "low":   0.36, "high":   0.36, "avgN":   0.36, "avgD": 1 }
          volume: 50
          first:  { "price": 321.12, "size": 50 }
          last:   { "price": 321.12, "size": 50 }
