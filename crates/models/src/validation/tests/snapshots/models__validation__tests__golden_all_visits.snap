---
source: crates/models/src/validation/tests/mod.rs
expression: tables
---
Tables {
    built_collections: [
        BuiltCollection {
            scope: test://int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            spec: {"name":"testing/int-reverse","schema_uri":"test://int-string.schema","key_ptrs":["/int"],"uuid_ptr":"/_meta/uuid","projections":[{"ptr":"/bit","field":"bit","user_provided":false,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["boolean"],"must_exist":true}},{"ptr":"","field":"flow_document","user_provided":false,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["object"],"must_exist":true}},{"ptr":"/int","field":"int","user_provided":false,"is_partition_key":false,"is_primary_key":true,"inference":{"types":["integer"],"must_exist":true}},{"ptr":"/str","field":"str","user_provided":false,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["string"],"must_exist":true,"string":{"is_base64":false}}}],"journal_spec":{"name":"","replication":3,"labels":null,"fragment":{"length":536870912,"compression_codec":5,"stores":["s3://a-bucket/and-prefix"],"refresh_interval":"300s","retention":null,"flush_interval":"3600s","path_postfix_template":"utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}"},"flags":0,"max_append_rate":0},"ack_json_template":"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}"},
        },
        BuiltCollection {
            scope: test://int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            spec: {"name":"testing/int-string","schema_uri":"test://int-string.schema","key_ptrs":["/int"],"uuid_ptr":"/_meta/uuid","partition_fields":["bit"],"projections":[{"ptr":"/int","field":"Int","user_provided":true,"is_partition_key":false,"is_primary_key":true,"inference":{"types":["integer"],"must_exist":true}},{"ptr":"/bit","field":"bit","user_provided":true,"is_partition_key":true,"is_primary_key":false,"inference":{"types":["boolean"],"must_exist":true}},{"ptr":"","field":"flow_document","user_provided":false,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["object"],"must_exist":true}},{"ptr":"/int","field":"int","user_provided":false,"is_partition_key":false,"is_primary_key":true,"inference":{"types":["integer"],"must_exist":true}},{"ptr":"/str","field":"str","user_provided":false,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["string"],"must_exist":true,"string":{"is_base64":false}}}],"journal_spec":{"name":"","replication":3,"labels":null,"fragment":{"length":536870912,"compression_codec":5,"stores":["s3://a-bucket/and-prefix"],"refresh_interval":"300s","retention":null,"flush_interval":"3600s","path_postfix_template":"utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}"},"flags":0,"max_append_rate":0},"ack_json_template":"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}"},
        },
        BuiltCollection {
            scope: test://int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            spec: {"name":"testing/int-halve","schema_uri":"test://int-string-len.schema","key_ptrs":["/int"],"uuid_ptr":"/_meta/uuid","partition_fields":["Len"],"projections":[{"ptr":"/extra","field":"Extra","user_provided":true,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["boolean"],"must_exist":false}},{"ptr":"/len","field":"Len","user_provided":true,"is_partition_key":true,"is_primary_key":false,"inference":{"types":["integer"],"must_exist":true}},{"ptr":"","field":"Root","user_provided":true,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["object"],"must_exist":true}},{"ptr":"/bit","field":"bit","user_provided":false,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["boolean"],"must_exist":true}},{"ptr":"/extra","field":"extra","user_provided":false,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["boolean"],"must_exist":false}},{"ptr":"","field":"flow_document","user_provided":false,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["object"],"must_exist":true}},{"ptr":"/int","field":"int","user_provided":false,"is_partition_key":false,"is_primary_key":true,"inference":{"types":["integer"],"must_exist":true}},{"ptr":"/len","field":"len","user_provided":false,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["integer"],"must_exist":true}},{"ptr":"/str","field":"str","user_provided":false,"is_partition_key":false,"is_primary_key":false,"inference":{"types":["string"],"must_exist":true,"string":{"is_base64":false}}}],"journal_spec":{"name":"","replication":3,"labels":null,"fragment":{"length":536870912,"compression_codec":5,"stores":["s3://a-bucket/and-prefix"],"refresh_interval":"300s","retention":null,"flush_interval":"3600s","path_postfix_template":"utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}"},"flags":0,"max_append_rate":0},"ack_json_template":"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}"},
        },
    ],
    built_materializations: [
        BuiltMaterialization {
            scope: test://int-string-materialization#/materializations/testing~1int-string,
            materialization: testing/int-string,
            collection: testing/int-string,
            endpoint_config: {"bucket":"a-bucket","fixture":"one","prefix":"and-prefix"},
            field_selection: {"keys":["int"],"values":["str"],"document":"flow_document","field_config":{"str":"{\"pass\":\"through\"}"}},
        },
        BuiltMaterialization {
            scope: test://int-halve-materialization#/materializations/testing~1int-halve,
            materialization: testing/int-halve,
            collection: testing/int-halve,
            endpoint_config: {"bucket":"a-bucket","fixture":"two","prefix":"and-prefix"},
            field_selection: {"keys":["int"],"values":["Len","Extra"],"document":"Root","field_config":{"Len":"{}"}},
        },
    ],
    errors: [],
    implicit_projections: [
        Projection {
            scope: test://int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: bit,
            location: /bit,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: int,
            location: /int,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: str,
            location: /str,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            field: int,
            location: /int,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            field: str,
            location: /str,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: bit,
            location: /bit,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: extra,
            location: /extra,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: int,
            location: /int,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: len,
            location: /len,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: str,
            location: /str,
            partition: 0,
            user_provided: 0,
        },
    ],
    inferences: [
        Inference {
            schema: test://int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            location: ,
            spec: {"types":["integer"],"must_exist":true},
        },
        Inference {
            schema: test://int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            location: ,
            spec: {"types":["array","boolean","null","number","object","string"],"must_exist":true,"string":{"is_base64":false}},
        },
        Inference {
            schema: test://int-string-len.schema,
            location: /bit,
            spec: {"types":["boolean"],"must_exist":true},
        },
        Inference {
            schema: test://int-string-len.schema,
            location: /extra,
            spec: {"types":["boolean"],"must_exist":false},
        },
        Inference {
            schema: test://int-string-len.schema,
            location: ,
            spec: {"types":["object"],"must_exist":true},
        },
        Inference {
            schema: test://int-string-len.schema,
            location: /int,
            spec: {"types":["integer"],"must_exist":true},
        },
        Inference {
            schema: test://int-string-len.schema,
            location: /len,
            spec: {"types":["integer"],"must_exist":true},
        },
        Inference {
            schema: test://int-string-len.schema,
            location: /str,
            spec: {"types":["string"],"must_exist":true,"string":{"is_base64":false}},
        },
        Inference {
            schema: test://int-string.schema,
            location: /bit,
            spec: {"types":["boolean"],"must_exist":true},
        },
        Inference {
            schema: test://int-string.schema,
            location: ,
            spec: {"types":["object"],"must_exist":true},
        },
        Inference {
            schema: test://int-string.schema,
            location: /int,
            spec: {"types":["integer"],"must_exist":true},
        },
        Inference {
            schema: test://int-string.schema,
            location: /str,
            spec: {"types":["string"],"must_exist":true,"string":{"is_base64":false}},
        },
    ],
}
