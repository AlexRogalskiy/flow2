---
source: crates/models/src/source/scenarios/mod.rs
expression: tables
---
Tables {
    captures: [],
    collections: [
        Collection {
            scope: test://root#/collections/a~1collection,
            collection: a/collection,
            schema: test://example/schema,
            key: ["/key"],
            store_endpoint: endpoint,
            store_patch_config: {},
        },
    ],
    derivations: [],
    endpoints: [],
    errors: [
        Error {
            scope: test://root#/import/1,
            error: failed to fetch resource test://not/found
            
            Caused by:
                fixture not found,
        },
    ],
    fetches: [
        Fetch {
            resource: test://root,
        },
        Fetch {
            resource: test://root/sibling,
        },
        Fetch {
            resource: test://not/found,
        },
        Fetch {
            resource: test://example/schema,
        },
    ],
    imports: [
        Import {
            scope: test://root#/import/0,
            from_resource: test://root,
            to_resource: test://root/sibling,
        },
        Import {
            scope: test://root#/import/1,
            from_resource: test://root,
            to_resource: test://not/found,
        },
        Import {
            scope: test://root#/collections/a~1collection/schema,
            from_resource: test://root,
            to_resource: test://example/schema,
        },
    ],
    materializations: [],
    nodejs_dependencies: [
        NodeJSDependency {
            scope: test://root#/nodeDependencies/package-one,
            package: package-one,
            version: v0.1.2,
        },
        NodeJSDependency {
            scope: test://root#/nodeDependencies/pkg-2,
            package: pkg-2,
            version: ~v2,
        },
    ],
    projections: [
        Projection {
            scope: test://root#/collections/a~1collection/projections/baz,
            collection: a/collection,
            field: baz,
            location: /bing,
            partition: 1,
            user_provided: 1,
        },
        Projection {
            scope: test://root#/collections/a~1collection/projections/foo,
            collection: a/collection,
            field: foo,
            location: /bar,
            partition: 0,
            user_provided: 1,
        },
    ],
    resources: [
        Resource {
            resource: test://root,
            content_type: "CatalogSpec",
            content: ".. binary ..",
        },
        Resource {
            resource: test://root/sibling,
            content_type: "CatalogSpec",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/schema,
            content_type: "JsonSchema",
            content: ".. binary ..",
        },
    ],
    schema_docs: [
        SchemaDoc {
            schema: test://example/schema,
            dom: true,
        },
    ],
    test_steps: [],
    transforms: [],
}
