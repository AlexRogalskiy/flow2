// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go/protocol/flow.proto

package protocol

import (
	bytes "bytes"
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	go_gazette_dev_core_broker_protocol "go.gazette.dev/core/broker/protocol"
	protocol "go.gazette.dev/core/broker/protocol"
	go_gazette_dev_core_consumer_protocol "go.gazette.dev/core/consumer/protocol"
	protocol1 "go.gazette.dev/core/consumer/protocol"
	recoverylog "go.gazette.dev/core/consumer/recoverylog"
	go_gazette_dev_core_message "go.gazette.dev/core/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Optional hash applied to extracted, packed shuffle keys. Hashes can:
// * Mitigate shard skew which might otherwise occur due to key locality
//   (many co-occurring updates to "nearby" keys).
// * Give predictable storage sizes for keys which are otherwise unbounded.
// * Allow for joins over sensitive fields, which should not be stored
//   in-the-clear at rest where possible.
// Either cryptographic or non-cryptographic functions may be appropriate
// depending on thse use case.
type Shuffle_Hash int32

const (
	// None performs no hash, returning the original key.
	Shuffle_NONE Shuffle_Hash = 0
	// MD5 returns the MD5 digest of the original key. It is not a safe
	// cryptographic hash, but is well-known and fast, with good distribution
	// properties.
	Shuffle_MD5 Shuffle_Hash = 1
)

var Shuffle_Hash_name = map[int32]string{
	0: "NONE",
	1: "MD5",
}

var Shuffle_Hash_value = map[string]int32{
	"NONE": 0,
	"MD5":  1,
}

func (x Shuffle_Hash) String() string {
	return proto.EnumName(Shuffle_Hash_name, int32(x))
}

func (Shuffle_Hash) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{2, 0}
}

type Field_Value_Kind int32

const (
	Field_Value_INVALID  Field_Value_Kind = 0
	Field_Value_NULL     Field_Value_Kind = 1
	Field_Value_TRUE     Field_Value_Kind = 2
	Field_Value_FALSE    Field_Value_Kind = 3
	Field_Value_STRING   Field_Value_Kind = 4
	Field_Value_UNSIGNED Field_Value_Kind = 5
	Field_Value_SIGNED   Field_Value_Kind = 6
	Field_Value_DOUBLE   Field_Value_Kind = 7
	Field_Value_OBJECT   Field_Value_Kind = 8
	Field_Value_ARRAY    Field_Value_Kind = 9
)

var Field_Value_Kind_name = map[int32]string{
	0: "INVALID",
	1: "NULL",
	2: "TRUE",
	3: "FALSE",
	4: "STRING",
	5: "UNSIGNED",
	6: "SIGNED",
	7: "DOUBLE",
	8: "OBJECT",
	9: "ARRAY",
}

var Field_Value_Kind_value = map[string]int32{
	"INVALID":  0,
	"NULL":     1,
	"TRUE":     2,
	"FALSE":    3,
	"STRING":   4,
	"UNSIGNED": 5,
	"SIGNED":   6,
	"DOUBLE":   7,
	"OBJECT":   8,
	"ARRAY":    9,
}

func (x Field_Value_Kind) String() string {
	return proto.EnumName(Field_Value_Kind_name, int32(x))
}

func (Field_Value_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{7, 0, 0}
}

// Slice represents a contiguous slice of bytes within an associated Arena.
type Slice struct {
	Begin uint32 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *Slice) Reset()         { *m = Slice{} }
func (m *Slice) String() string { return proto.CompactTextString(m) }
func (*Slice) ProtoMessage()    {}
func (*Slice) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{0}
}
func (m *Slice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Slice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Slice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Slice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slice.Merge(m, src)
}
func (m *Slice) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Slice) XXX_DiscardUnknown() {
	xxx_messageInfo_Slice.DiscardUnknown(m)
}

var xxx_messageInfo_Slice proto.InternalMessageInfo

// UUIDParts is a deconstructed, RFC 4122 v1 variant Universally Unique
// Identifier as used by Gazette.
type UUIDParts struct {
	// Producer is the unique node identifier portion of a v1 UUID, as the high
	// 48 bits of |producer_and_flags|. The MSB must be 1 to mark this producer
	// as "multicast" and not an actual MAC address (as per RFC 4122).
	//
	// Bits 49-54 must be zero.
	//
	// The low 10 bits are the 10 least-significant bits of the v1 UUID clock
	// sequence, used by Gazette to represent flags over message transaction
	// semantics.
	ProducerAndFlags uint64 `protobuf:"fixed64,1,opt,name=producer_and_flags,json=producerAndFlags,proto3" json:"producer_and_flags,omitempty"`
	// Clock is a v1 UUID 60-bit timestamp (60 MSBs), followed by 4 bits of
	// sequence counter.
	Clock go_gazette_dev_core_message.Clock `protobuf:"fixed64,2,opt,name=clock,proto3,casttype=go.gazette.dev/core/message.Clock" json:"clock,omitempty"`
}

func (m *UUIDParts) Reset()         { *m = UUIDParts{} }
func (m *UUIDParts) String() string { return proto.CompactTextString(m) }
func (*UUIDParts) ProtoMessage()    {}
func (*UUIDParts) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{1}
}
func (m *UUIDParts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UUIDParts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UUIDParts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UUIDParts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UUIDParts.Merge(m, src)
}
func (m *UUIDParts) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UUIDParts) XXX_DiscardUnknown() {
	xxx_messageInfo_UUIDParts.DiscardUnknown(m)
}

var xxx_messageInfo_UUIDParts proto.InternalMessageInfo

// Shuffle is a description of a document shuffle, where each document
// is mapped into:
//  * An extracted, packed composite key (a "shuffle key").
//  * A rotated Clock value (an "r-clock").
// The packed key and r-clock can then be compared to a reader RangeSpec.
type Shuffle struct {
	// Composite key over which shuffling occurs, specified as one or more
	// JSON-Pointers indicating a message location to extract.
	ShuffleKeyPtr []string `protobuf:"bytes,1,rep,name=shuffle_key_ptr,json=shuffleKeyPtr,proto3" json:"shuffle_key_ptr,omitempty"`
	// uses_source_key is true if shuffle_key_ptr is the source's native key,
	// and false if it's some other key. When shuffling using the source's key,
	// we can minimize data movement by assigning a shard coordinator for each
	// journal such that the shard's key range overlap that of the journal.
	UsesSourceKey bool `protobuf:"varint,2,opt,name=uses_source_key,json=usesSourceKey,proto3" json:"uses_source_key,omitempty"`
	// filter_r_clocks is true if the shuffle coordinator should filter documents
	// sent to each subscriber based on its covered r-clock ranges and the
	// individual document clocks. If false, the subscriber's r-clock range is
	// ignored and all documents which match the key range are sent.
	//
	// filter_r_clocks is set 'true' when reading on behalf of transforms having
	// a "publish" but not an "update" lambda, as such documents have no
	// side-effects on the reader's state store, and would not be published anyway
	// for falling outside of the reader's r-clock range.
	FilterRClocks bool         `protobuf:"varint,3,opt,name=filter_r_clocks,json=filterRClocks,proto3" json:"filter_r_clocks,omitempty"`
	Hash          Shuffle_Hash `protobuf:"varint,4,opt,name=hash,proto3,enum=flow.Shuffle_Hash" json:"hash,omitempty"`
	// Number of seconds for which documents of this collection are delayed
	// while reading, relative to other documents (when back-filling) and the
	// present wall-clock time (when tailing).
	ReadDelaySeconds     uint32   `protobuf:"varint,5,opt,name=read_delay_seconds,json=readDelaySeconds,proto3" json:"read_delay_seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Shuffle) Reset()         { *m = Shuffle{} }
func (m *Shuffle) String() string { return proto.CompactTextString(m) }
func (*Shuffle) ProtoMessage()    {}
func (*Shuffle) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{2}
}
func (m *Shuffle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Shuffle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Shuffle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Shuffle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shuffle.Merge(m, src)
}
func (m *Shuffle) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Shuffle) XXX_DiscardUnknown() {
	xxx_messageInfo_Shuffle.DiscardUnknown(m)
}

var xxx_messageInfo_Shuffle proto.InternalMessageInfo

// JournalShuffle is a Shuffle of a Journal by a Coordinator shard.
type JournalShuffle struct {
	// Journal to be shuffled.
	Journal go_gazette_dev_core_broker_protocol.Journal `protobuf:"bytes,1,opt,name=journal,proto3,casttype=go.gazette.dev/core/broker/protocol.Journal" json:"journal,omitempty"`
	// Coordinator is the Shard ID which is responsible for reads of this journal.
	Coordinator go_gazette_dev_core_consumer_protocol.ShardID `protobuf:"bytes,2,opt,name=coordinator,proto3,casttype=go.gazette.dev/core/consumer/protocol.ShardID" json:"coordinator,omitempty"`
	// Shuffle of this JournalShuffle.
	Shuffle              `protobuf:"bytes,3,opt,name=shuffle,proto3,embedded=shuffle" json:"shuffle"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JournalShuffle) Reset()         { *m = JournalShuffle{} }
func (m *JournalShuffle) String() string { return proto.CompactTextString(m) }
func (*JournalShuffle) ProtoMessage()    {}
func (*JournalShuffle) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{3}
}
func (m *JournalShuffle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JournalShuffle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JournalShuffle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JournalShuffle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JournalShuffle.Merge(m, src)
}
func (m *JournalShuffle) XXX_Size() int {
	return m.ProtoSize()
}
func (m *JournalShuffle) XXX_DiscardUnknown() {
	xxx_messageInfo_JournalShuffle.DiscardUnknown(m)
}

var xxx_messageInfo_JournalShuffle proto.InternalMessageInfo

// Projection is a mapping between a document location, specified as a
// JSON-Pointer, and a corresponding field string in a flattened
// (i.e. tabular or SQL) namespace which aliases it.
type Projection struct {
	// Document location of this projection, as a JSON-Pointer.
	Ptr string `protobuf:"bytes,1,opt,name=ptr,proto3" json:"ptr,omitempty"`
	// Field is the flattened, tabular alias of this projection.
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
}

func (m *Projection) Reset()         { *m = Projection{} }
func (m *Projection) String() string { return proto.CompactTextString(m) }
func (*Projection) ProtoMessage()    {}
func (*Projection) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{4}
}
func (m *Projection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Projection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Projection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Projection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Projection.Merge(m, src)
}
func (m *Projection) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Projection) XXX_DiscardUnknown() {
	xxx_messageInfo_Projection.DiscardUnknown(m)
}

var xxx_messageInfo_Projection proto.InternalMessageInfo

type CollectionSpec struct {
	// Name of this collection.
	Name Collection `protobuf:"bytes,1,opt,name=name,proto3,casttype=Collection" json:"name,omitempty"`
	// Schema against which collection documents are validated,
	// and which provides reduction annotations.
	SchemaUri string `protobuf:"bytes,2,opt,name=schema_uri,json=schemaUri,proto3" json:"schema_uri,omitempty"`
	// Composite key of the collection, as JSON-Pointers.
	KeyPtrs []string `protobuf:"bytes,3,rep,name=key_ptrs,json=keyPtrs,proto3" json:"key_ptrs,omitempty"`
	// JSON pointer locating the UUID of each collection document.
	UuidPtr string `protobuf:"bytes,4,opt,name=uuid_ptr,json=uuidPtr,proto3" json:"uuid_ptr,omitempty"`
	// Logical partitions of this collection.
	Partitions []Projection `protobuf:"bytes,5,rep,name=partitions,proto3" json:"partitions"`
	// Logical projections of this collection.
	Projections []Projection `protobuf:"bytes,6,rep,name=projections,proto3" json:"projections"`
	// JournalSpec used for dynamically-created journals of this collection.
	JournalSpec protocol.JournalSpec `protobuf:"bytes,7,opt,name=journal_spec,json=journalSpec,proto3" json:"journal_spec"`
	// JSON-encoded document template for creating Gazette consumer
	// transaction acknowledgements of writes into this collection.
	AckJsonTemplate      []byte   `protobuf:"bytes,8,opt,name=ack_json_template,json=ackJsonTemplate,proto3" json:"ack_json_template,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionSpec) Reset()         { *m = CollectionSpec{} }
func (m *CollectionSpec) String() string { return proto.CompactTextString(m) }
func (*CollectionSpec) ProtoMessage()    {}
func (*CollectionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{5}
}
func (m *CollectionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionSpec.Merge(m, src)
}
func (m *CollectionSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CollectionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionSpec proto.InternalMessageInfo

// Transform describes a specific transform of a derived collection.
type TransformSpec struct {
	// Stable name of this transform, scoped to it's Derivation.
	Name Transform `protobuf:"bytes,1,opt,name=name,proto3,casttype=Transform" json:"name,omitempty"`
	// ID of this transform within the present catalog DB.
	// This ID is *not* stable /across/ different catalog DBs.
	// Instead, use |name| for equality testing.
	CatalogDbId int32                `protobuf:"varint,2,opt,name=catalog_db_id,json=catalogDbId,proto3" json:"catalog_db_id,omitempty"`
	Source      TransformSpec_Source `protobuf:"bytes,3,opt,name=source,proto3" json:"source"`
	// Shuffle applied to source documents for this transform.
	// Note that the Shuffle embeds the Transform name.
	Shuffle              Shuffle                  `protobuf:"bytes,4,opt,name=shuffle,proto3" json:"shuffle"`
	Derivation           TransformSpec_Derivation `protobuf:"bytes,5,opt,name=derivation,proto3" json:"derivation"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TransformSpec) Reset()         { *m = TransformSpec{} }
func (m *TransformSpec) String() string { return proto.CompactTextString(m) }
func (*TransformSpec) ProtoMessage()    {}
func (*TransformSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{6}
}
func (m *TransformSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransformSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransformSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransformSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformSpec.Merge(m, src)
}
func (m *TransformSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TransformSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TransformSpec proto.InternalMessageInfo

// Source collection read by this transform.
type TransformSpec_Source struct {
	// Name of the collection.
	Name Collection `protobuf:"bytes,1,opt,name=name,proto3,casttype=Collection" json:"name,omitempty"`
	// Selector of partitions of the collection which this transform reads.
	Partitions           protocol.LabelSelector `protobuf:"bytes,2,opt,name=partitions,proto3" json:"partitions"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TransformSpec_Source) Reset()         { *m = TransformSpec_Source{} }
func (m *TransformSpec_Source) String() string { return proto.CompactTextString(m) }
func (*TransformSpec_Source) ProtoMessage()    {}
func (*TransformSpec_Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{6, 0}
}
func (m *TransformSpec_Source) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransformSpec_Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransformSpec_Source.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransformSpec_Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformSpec_Source.Merge(m, src)
}
func (m *TransformSpec_Source) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TransformSpec_Source) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformSpec_Source.DiscardUnknown(m)
}

var xxx_messageInfo_TransformSpec_Source proto.InternalMessageInfo

// Derived collection produced by this transform.
type TransformSpec_Derivation struct {
	Name                 Collection `protobuf:"bytes,1,opt,name=name,proto3,casttype=Collection" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TransformSpec_Derivation) Reset()         { *m = TransformSpec_Derivation{} }
func (m *TransformSpec_Derivation) String() string { return proto.CompactTextString(m) }
func (*TransformSpec_Derivation) ProtoMessage()    {}
func (*TransformSpec_Derivation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{6, 1}
}
func (m *TransformSpec_Derivation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransformSpec_Derivation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransformSpec_Derivation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransformSpec_Derivation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformSpec_Derivation.Merge(m, src)
}
func (m *TransformSpec_Derivation) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TransformSpec_Derivation) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformSpec_Derivation.DiscardUnknown(m)
}

var xxx_messageInfo_TransformSpec_Derivation proto.InternalMessageInfo

// Field holds a column of values extracted from a document location.
type Field struct {
	Values               []Field_Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Field) Reset()         { *m = Field{} }
func (m *Field) String() string { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()    {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{7}
}
func (m *Field) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Field.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(m, src)
}
func (m *Field) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

// Value is the extracted representation of the field value.
type Field_Value struct {
	Kind     Field_Value_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=flow.Field_Value_Kind" json:"kind,omitempty"`
	Unsigned uint64           `protobuf:"varint,2,opt,name=unsigned,proto3" json:"unsigned,omitempty"`
	Signed   int64            `protobuf:"zigzag64,3,opt,name=signed,proto3" json:"signed,omitempty"`
	Double   float64          `protobuf:"fixed64,4,opt,name=double,proto3" json:"double,omitempty"`
	Bytes    Slice            `protobuf:"bytes,5,opt,name=bytes,proto3" json:"bytes"`
}

func (m *Field_Value) Reset()         { *m = Field_Value{} }
func (m *Field_Value) String() string { return proto.CompactTextString(m) }
func (*Field_Value) ProtoMessage()    {}
func (*Field_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{7, 0}
}
func (m *Field_Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Field_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Field_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Field_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field_Value.Merge(m, src)
}
func (m *Field_Value) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Field_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Field_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Field_Value proto.InternalMessageInfo

// RangeSpec describes the ranges of shuffle keys and r-clocks which a reader
// is responsible for.
type RangeSpec struct {
	// Byte [begin, end) exclusive range of keys to be shuffled to this reader.
	KeyBegin []byte `protobuf:"bytes,2,opt,name=key_begin,json=keyBegin,proto3" json:"key_begin,omitempty"`
	KeyEnd   []byte `protobuf:"bytes,3,opt,name=key_end,json=keyEnd,proto3" json:"key_end,omitempty"`
	// Rotated [begin, end) exclusive ranges of Clocks to be shuffled to this
	// reader.
	RClockBegin          uint64   `protobuf:"varint,4,opt,name=r_clock_begin,json=rClockBegin,proto3" json:"r_clock_begin,omitempty"`
	RClockEnd            uint64   `protobuf:"varint,5,opt,name=r_clock_end,json=rClockEnd,proto3" json:"r_clock_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeSpec) Reset()         { *m = RangeSpec{} }
func (m *RangeSpec) String() string { return proto.CompactTextString(m) }
func (*RangeSpec) ProtoMessage()    {}
func (*RangeSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{8}
}
func (m *RangeSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeSpec.Merge(m, src)
}
func (m *RangeSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RangeSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RangeSpec proto.InternalMessageInfo

// ShuffleRequest is the request message of a Shuffle RPC.
type ShuffleRequest struct {
	Shuffle JournalShuffle `protobuf:"bytes,1,opt,name=shuffle,proto3" json:"shuffle"`
	Range   RangeSpec      `protobuf:"bytes,2,opt,name=range,proto3" json:"range"`
	// Offset to begin reading the journal from.
	Offset go_gazette_dev_core_broker_protocol.Offset `protobuf:"varint,3,opt,name=offset,proto3,casttype=go.gazette.dev/core/broker/protocol.Offset" json:"offset,omitempty"`
	// Offset to stop reading the journal at, or zero if unbounded.
	EndOffset go_gazette_dev_core_broker_protocol.Offset `protobuf:"varint,4,opt,name=end_offset,json=endOffset,proto3,casttype=go.gazette.dev/core/broker/protocol.Offset" json:"end_offset,omitempty"`
	// Resolution header of the |config.coordinator_index| shard.
	Resolution           *protocol.Header `protobuf:"bytes,5,opt,name=resolution,proto3" json:"resolution,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ShuffleRequest) Reset()         { *m = ShuffleRequest{} }
func (m *ShuffleRequest) String() string { return proto.CompactTextString(m) }
func (*ShuffleRequest) ProtoMessage()    {}
func (*ShuffleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{9}
}
func (m *ShuffleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShuffleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShuffleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShuffleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShuffleRequest.Merge(m, src)
}
func (m *ShuffleRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ShuffleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShuffleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShuffleRequest proto.InternalMessageInfo

// ShuffleResponse is the streamed response message of a Shuffle RPC.
type ShuffleResponse struct {
	// Status of the Shuffle RPC.
	Status protocol1.Status `protobuf:"varint,1,opt,name=status,proto3,enum=consumer.Status" json:"status,omitempty"`
	// Header of the response.
	Header *protocol.Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// Terminal error encountered while serving this ShuffleRequest. A terminal
	// error is only sent if a future ShuffleRequest of this same configuration
	// and offset will fail in the exact same way, and operator intervention is
	// required to properly recover. Such errors are returned so that the caller
	// can also abort with a useful, contextual error message.
	//
	// Examples of terminal errors include the requested journal not existing,
	// or data corruption. Errors *not* returned as |terminal_error| include
	// network errors, process failures, and other conditions which can be
	// retried.
	TerminalError string `protobuf:"bytes,3,opt,name=terminal_error,json=terminalError,proto3" json:"terminal_error,omitempty"`
	// Offset which was read through to produce this ShuffleResponse.
	ReadThrough go_gazette_dev_core_broker_protocol.Offset `protobuf:"varint,4,opt,name=read_through,json=readThrough,proto3,casttype=go.gazette.dev/core/broker/protocol.Offset" json:"read_through,omitempty"`
	// WriteHead of the journal as reported by the broker, as of the creation of
	// this ShuffleResponse.
	WriteHead go_gazette_dev_core_broker_protocol.Offset `protobuf:"varint,5,opt,name=write_head,json=writeHead,proto3,casttype=go.gazette.dev/core/broker/protocol.Offset" json:"write_head,omitempty"`
	// Memory arena of this message.
	Arena Arena `protobuf:"bytes,6,opt,name=arena,proto3,casttype=Arena" json:"arena,omitempty"`
	// Shuffled documents, each encoded in the 'application/json'
	// media-type.
	DocsJson []Slice `protobuf:"bytes,7,rep,name=docs_json,json=docsJson,proto3" json:"docs_json"`
	// The begin offset of each document within the requested journal.
	Begin []go_gazette_dev_core_broker_protocol.Offset `protobuf:"varint,8,rep,packed,name=begin,proto3,casttype=go.gazette.dev/core/broker/protocol.Offset" json:"begin,omitempty"`
	// The end offset of each document within the journal.
	End []go_gazette_dev_core_broker_protocol.Offset `protobuf:"varint,9,rep,packed,name=end,proto3,casttype=go.gazette.dev/core/broker/protocol.Offset" json:"end,omitempty"`
	// UUIDParts of each document.
	UuidParts []UUIDParts `protobuf:"bytes,10,rep,name=uuid_parts,json=uuidParts,proto3" json:"uuid_parts"`
	// Packed, embedded encoding of the shuffle key into a byte string.
	// If the Shuffle specified a Hash to use, it's applied as well.
	PackedKey []Slice `protobuf:"bytes,11,rep,name=packed_key,json=packedKey,proto3" json:"packed_key"`
	// Extracted shuffle key of each document, with one Field for each
	// component of the composite shuffle key.
	ShuffleKey           []Field  `protobuf:"bytes,12,rep,name=shuffle_key,json=shuffleKey,proto3" json:"shuffle_key"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShuffleResponse) Reset()         { *m = ShuffleResponse{} }
func (m *ShuffleResponse) String() string { return proto.CompactTextString(m) }
func (*ShuffleResponse) ProtoMessage()    {}
func (*ShuffleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{10}
}
func (m *ShuffleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShuffleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShuffleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShuffleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShuffleResponse.Merge(m, src)
}
func (m *ShuffleResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ShuffleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShuffleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShuffleResponse proto.InternalMessageInfo

type ExtractRequest struct {
	// Memory arena of this message.
	Arena Arena `protobuf:"bytes,1,opt,name=arena,proto3,casttype=Arena" json:"arena,omitempty"`
	// Documents to extract, each encoded in the 'application/json'
	// media-type.
	DocsJson []Slice `protobuf:"bytes,2,rep,name=docs_json,json=docsJson,proto3" json:"docs_json"`
	// JSON pointer of the document UUID to extract.
	// If empty, UUIDParts are not extracted.
	UuidPtr string `protobuf:"bytes,3,opt,name=uuid_ptr,json=uuidPtr,proto3" json:"uuid_ptr,omitempty"`
	// Field JSON pointers to extract from documents and return.
	// If empty, no fields are extracted.
	FieldPtrs            []string `protobuf:"bytes,4,rep,name=field_ptrs,json=fieldPtrs,proto3" json:"field_ptrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtractRequest) Reset()         { *m = ExtractRequest{} }
func (m *ExtractRequest) String() string { return proto.CompactTextString(m) }
func (*ExtractRequest) ProtoMessage()    {}
func (*ExtractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{11}
}
func (m *ExtractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtractRequest.Merge(m, src)
}
func (m *ExtractRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ExtractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExtractRequest proto.InternalMessageInfo

type ExtractResponse struct {
	// Memory arena of this message.
	Arena Arena `protobuf:"bytes,1,opt,name=arena,proto3,casttype=Arena" json:"arena,omitempty"`
	// UUIDParts extracted from request Documents.
	UuidParts []UUIDParts `protobuf:"bytes,2,rep,name=uuid_parts,json=uuidParts,proto3" json:"uuid_parts"`
	// Fields extracted from request Documents, one column per request pointer.
	Fields               []Field  `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtractResponse) Reset()         { *m = ExtractResponse{} }
func (m *ExtractResponse) String() string { return proto.CompactTextString(m) }
func (*ExtractResponse) ProtoMessage()    {}
func (*ExtractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{12}
}
func (m *ExtractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtractResponse.Merge(m, src)
}
func (m *ExtractResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ExtractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExtractResponse proto.InternalMessageInfo

type CombineRequest struct {
	// Types that are valid to be assigned to Kind:
	//	*CombineRequest_Open_
	//	*CombineRequest_Continue_
	Kind                 isCombineRequest_Kind `protobuf_oneof:"kind"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CombineRequest) Reset()         { *m = CombineRequest{} }
func (m *CombineRequest) String() string { return proto.CompactTextString(m) }
func (*CombineRequest) ProtoMessage()    {}
func (*CombineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{13}
}
func (m *CombineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CombineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CombineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CombineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CombineRequest.Merge(m, src)
}
func (m *CombineRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CombineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CombineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CombineRequest proto.InternalMessageInfo

type isCombineRequest_Kind interface {
	isCombineRequest_Kind()
	MarshalTo([]byte) (int, error)
	ProtoSize() int
}

type CombineRequest_Open_ struct {
	Open *CombineRequest_Open `protobuf:"bytes,1,opt,name=open,proto3,oneof" json:"open,omitempty"`
}
type CombineRequest_Continue_ struct {
	Continue *CombineRequest_Continue `protobuf:"bytes,2,opt,name=continue,proto3,oneof" json:"continue,omitempty"`
}

func (*CombineRequest_Open_) isCombineRequest_Kind()     {}
func (*CombineRequest_Continue_) isCombineRequest_Kind() {}

func (m *CombineRequest) GetKind() isCombineRequest_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *CombineRequest) GetOpen() *CombineRequest_Open {
	if x, ok := m.GetKind().(*CombineRequest_Open_); ok {
		return x.Open
	}
	return nil
}

func (m *CombineRequest) GetContinue() *CombineRequest_Continue {
	if x, ok := m.GetKind().(*CombineRequest_Continue_); ok {
		return x.Continue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CombineRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CombineRequest_Open_)(nil),
		(*CombineRequest_Continue_)(nil),
	}
}

// Open a CombineRequest.
type CombineRequest_Open struct {
	// Schema against which documents are to be validated,
	// and which provides reduction annotations.
	SchemaUri string `protobuf:"bytes,1,opt,name=schema_uri,json=schemaUri,proto3" json:"schema_uri,omitempty"`
	// Composite key used to group documents to be combined, specified as one or
	// more JSON-Pointers indicating a message location to extract.
	// If empty, all request documents are combined into a single response
	// document.
	KeyPtr []string `protobuf:"bytes,2,rep,name=key_ptr,json=keyPtr,proto3" json:"key_ptr,omitempty"`
	// Field JSON pointers to be extracted from combined documents and returned.
	// If empty, no fields are extracted.
	FieldPtrs []string `protobuf:"bytes,3,rep,name=field_ptrs,json=fieldPtrs,proto3" json:"field_ptrs,omitempty"`
	// JSON-Pointer at which a placeholder UUID should be inserted into
	// returned documents. If empty, no placeholder is inserted.
	UuidPlaceholderPtr   string   `protobuf:"bytes,4,opt,name=uuid_placeholder_ptr,json=uuidPlaceholderPtr,proto3" json:"uuid_placeholder_ptr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CombineRequest_Open) Reset()         { *m = CombineRequest_Open{} }
func (m *CombineRequest_Open) String() string { return proto.CompactTextString(m) }
func (*CombineRequest_Open) ProtoMessage()    {}
func (*CombineRequest_Open) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{13, 0}
}
func (m *CombineRequest_Open) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CombineRequest_Open) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CombineRequest_Open.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CombineRequest_Open) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CombineRequest_Open.Merge(m, src)
}
func (m *CombineRequest_Open) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CombineRequest_Open) XXX_DiscardUnknown() {
	xxx_messageInfo_CombineRequest_Open.DiscardUnknown(m)
}

var xxx_messageInfo_CombineRequest_Open proto.InternalMessageInfo

// Continue an opened CombineRequest.
type CombineRequest_Continue struct {
	// Memory arena of this message.
	Arena Arena `protobuf:"bytes,1,opt,name=arena,proto3,casttype=Arena" json:"arena,omitempty"`
	// Request documents to combine, each encoded in the 'application/json'
	// media-type.
	DocsJson             []Slice  `protobuf:"bytes,2,rep,name=docs_json,json=docsJson,proto3" json:"docs_json"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CombineRequest_Continue) Reset()         { *m = CombineRequest_Continue{} }
func (m *CombineRequest_Continue) String() string { return proto.CompactTextString(m) }
func (*CombineRequest_Continue) ProtoMessage()    {}
func (*CombineRequest_Continue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{13, 1}
}
func (m *CombineRequest_Continue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CombineRequest_Continue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CombineRequest_Continue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CombineRequest_Continue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CombineRequest_Continue.Merge(m, src)
}
func (m *CombineRequest_Continue) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CombineRequest_Continue) XXX_DiscardUnknown() {
	xxx_messageInfo_CombineRequest_Continue.DiscardUnknown(m)
}

var xxx_messageInfo_CombineRequest_Continue proto.InternalMessageInfo

type CombineResponse struct {
	// Memory arena of this message.
	Arena Arena `protobuf:"bytes,1,opt,name=arena,proto3,casttype=Arena" json:"arena,omitempty"`
	// Combined response documents, each encoded in the 'application/json'
	// media-type.
	DocsJson []Slice `protobuf:"bytes,2,rep,name=docs_json,json=docsJson,proto3" json:"docs_json"`
	// Fields extracted from request Documents, one column per request field
	// pointer.
	Fields               []Field  `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CombineResponse) Reset()         { *m = CombineResponse{} }
func (m *CombineResponse) String() string { return proto.CompactTextString(m) }
func (*CombineResponse) ProtoMessage()    {}
func (*CombineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{14}
}
func (m *CombineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CombineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CombineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CombineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CombineResponse.Merge(m, src)
}
func (m *CombineResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CombineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CombineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CombineResponse proto.InternalMessageInfo

// DeriveRequest is the streamed union type message of a Derive RPC.
type DeriveRequest struct {
	// Types that are valid to be assigned to Kind:
	//	*DeriveRequest_Open_
	//	*DeriveRequest_Continue_
	//	*DeriveRequest_Flush_
	//	*DeriveRequest_Prepare_
	Kind                 isDeriveRequest_Kind `protobuf_oneof:"kind"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DeriveRequest) Reset()         { *m = DeriveRequest{} }
func (m *DeriveRequest) String() string { return proto.CompactTextString(m) }
func (*DeriveRequest) ProtoMessage()    {}
func (*DeriveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{15}
}
func (m *DeriveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeriveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeriveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeriveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveRequest.Merge(m, src)
}
func (m *DeriveRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DeriveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveRequest proto.InternalMessageInfo

type isDeriveRequest_Kind interface {
	isDeriveRequest_Kind()
	MarshalTo([]byte) (int, error)
	ProtoSize() int
}

type DeriveRequest_Open_ struct {
	Open *DeriveRequest_Open `protobuf:"bytes,1,opt,name=open,proto3,oneof" json:"open,omitempty"`
}
type DeriveRequest_Continue_ struct {
	Continue *DeriveRequest_Continue `protobuf:"bytes,2,opt,name=continue,proto3,oneof" json:"continue,omitempty"`
}
type DeriveRequest_Flush_ struct {
	Flush *DeriveRequest_Flush `protobuf:"bytes,3,opt,name=flush,proto3,oneof" json:"flush,omitempty"`
}
type DeriveRequest_Prepare_ struct {
	Prepare *DeriveRequest_Prepare `protobuf:"bytes,4,opt,name=prepare,proto3,oneof" json:"prepare,omitempty"`
}

func (*DeriveRequest_Open_) isDeriveRequest_Kind()     {}
func (*DeriveRequest_Continue_) isDeriveRequest_Kind() {}
func (*DeriveRequest_Flush_) isDeriveRequest_Kind()    {}
func (*DeriveRequest_Prepare_) isDeriveRequest_Kind()  {}

func (m *DeriveRequest) GetKind() isDeriveRequest_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *DeriveRequest) GetOpen() *DeriveRequest_Open {
	if x, ok := m.GetKind().(*DeriveRequest_Open_); ok {
		return x.Open
	}
	return nil
}

func (m *DeriveRequest) GetContinue() *DeriveRequest_Continue {
	if x, ok := m.GetKind().(*DeriveRequest_Continue_); ok {
		return x.Continue
	}
	return nil
}

func (m *DeriveRequest) GetFlush() *DeriveRequest_Flush {
	if x, ok := m.GetKind().(*DeriveRequest_Flush_); ok {
		return x.Flush
	}
	return nil
}

func (m *DeriveRequest) GetPrepare() *DeriveRequest_Prepare {
	if x, ok := m.GetKind().(*DeriveRequest_Prepare_); ok {
		return x.Prepare
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeriveRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeriveRequest_Open_)(nil),
		(*DeriveRequest_Continue_)(nil),
		(*DeriveRequest_Flush_)(nil),
		(*DeriveRequest_Prepare_)(nil),
	}
}

// Open is sent (only) as the first message of a Derive RPC,
// and opens the derive transaction.
type DeriveRequest_Open struct {
	// Collection to be derived.
	Collection           Collection `protobuf:"bytes,1,opt,name=collection,proto3,casttype=Collection" json:"collection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DeriveRequest_Open) Reset()         { *m = DeriveRequest_Open{} }
func (m *DeriveRequest_Open) String() string { return proto.CompactTextString(m) }
func (*DeriveRequest_Open) ProtoMessage()    {}
func (*DeriveRequest_Open) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{15, 0}
}
func (m *DeriveRequest_Open) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeriveRequest_Open) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeriveRequest_Open.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeriveRequest_Open) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveRequest_Open.Merge(m, src)
}
func (m *DeriveRequest_Open) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DeriveRequest_Open) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveRequest_Open.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveRequest_Open proto.InternalMessageInfo

// Continue extends the derive transaction with additional
// source collection documents.
//
// * The flow consumer sends any number of EXTEND DeriveRequests,
//   containing source collection documents.
// * Concurrently, the derive worker responds with any number of
//   EXTEND DeriveResponses, each having documents to be added to
//   the collection being derived.
// * The flow consumer is responsible for publishing each derived
//   document to the appropriate collection & partition.
// * Note that DeriveRequest and DeriveResponse Continue messages are _not_
// 1:1.
//
// Continue transitions to continue or flush.
type DeriveRequest_Continue struct {
	// Memory arena of this message.
	Arena Arena `protobuf:"bytes,1,opt,name=arena,proto3,casttype=Arena" json:"arena,omitempty"`
	// Source documents to derive from, each encoded in the 'application/json'
	// media-type.
	DocsJson []Slice `protobuf:"bytes,2,rep,name=docs_json,json=docsJson,proto3" json:"docs_json"`
	// UUIDParts extracted from documents.
	UuidParts []UUIDParts `protobuf:"bytes,3,rep,name=uuid_parts,json=uuidParts,proto3" json:"uuid_parts"`
	// Packed, embedded encoding of the shuffle key into a byte string.
	// If the Shuffle specified a Hash to use, it's applied as well.
	PackedKey []Slice `protobuf:"bytes,4,rep,name=packed_key,json=packedKey,proto3" json:"packed_key"`
	// Catalog transform ID to which each document is applied.
	TransformId          []int32  `protobuf:"varint,5,rep,packed,name=transform_id,json=transformId,proto3" json:"transform_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeriveRequest_Continue) Reset()         { *m = DeriveRequest_Continue{} }
func (m *DeriveRequest_Continue) String() string { return proto.CompactTextString(m) }
func (*DeriveRequest_Continue) ProtoMessage()    {}
func (*DeriveRequest_Continue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{15, 1}
}
func (m *DeriveRequest_Continue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeriveRequest_Continue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeriveRequest_Continue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeriveRequest_Continue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveRequest_Continue.Merge(m, src)
}
func (m *DeriveRequest_Continue) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DeriveRequest_Continue) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveRequest_Continue.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveRequest_Continue proto.InternalMessageInfo

// FLUSH indicates the transacton pipeline is to flush.
//
// * The flow consumer issues FLUSH when its consumer transaction begins to
//   close.
// * The derive worker responds with FLUSH to indicate that all source
//   documents have been processed and all derived documents emitted.
// * The flow consumer awaits the response FLUSH, while continuing to begin
//   publish operations for all derived documents seen in the meantime.
// * On seeing FLUSH, the flow consumer is assured it's sequenced and started
//   publishing all derived documents of the transaction, and can now build
//   the consumer.Checkpoint which will be committed to the store.
//
// FLUSH transitions to PREPARE.
type DeriveRequest_Flush struct {
	// JSON-Pointer of the UUID placeholder in returned documents.
	UuidPlaceholderPtr string `protobuf:"bytes,1,opt,name=uuid_placeholder_ptr,json=uuidPlaceholderPtr,proto3" json:"uuid_placeholder_ptr,omitempty"`
	// Field JSON pointers to be extracted from combined documents and returned.
	// If empty, no fields are extracted.
	FieldPtrs            []string `protobuf:"bytes,2,rep,name=field_ptrs,json=fieldPtrs,proto3" json:"field_ptrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeriveRequest_Flush) Reset()         { *m = DeriveRequest_Flush{} }
func (m *DeriveRequest_Flush) String() string { return proto.CompactTextString(m) }
func (*DeriveRequest_Flush) ProtoMessage()    {}
func (*DeriveRequest_Flush) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{15, 2}
}
func (m *DeriveRequest_Flush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeriveRequest_Flush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeriveRequest_Flush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeriveRequest_Flush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveRequest_Flush.Merge(m, src)
}
func (m *DeriveRequest_Flush) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DeriveRequest_Flush) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveRequest_Flush.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveRequest_Flush proto.InternalMessageInfo

// PREPARE begins a commit of the transaction.
//
// * The flow consumer sends PREPARE with its consumer.Checkpoint.
// * On receipt, the derive worker queues an atomic recoverylog.Recorder
//   block that's conditioned on an (unresolved) "commit" future. Within
//   this recording block, underlying store commits (SQLite COMMIT and writing
//   a RocksDB WriteBatch) are issued to persist all state changes of the
//   transaction, along with the consumer.Checkpoint.
// * The derive worker responds with PREPARE once all local commits have
//   completed, and recoverylog writes have been queued (but not started,
//   awaiting COMMIT).
// * On receipt, the flow consumer arranges to invoke COMMIT on the completion
//   of all outstanding journal writes -- this the OpFuture passed to the
//   Store.StartCommit interface. It returns a future which will resolve only
//   after reading COMMIT from this transaction -- the OpFuture returned by
//   that interface.
//
// It's an error if a prior transaction is still running at the onset of
// PREPARE. However at the completion of PREPARE, a new & concurrent
// Transaction may begin, though it itself cannot PREPARE until this
// Transaction fully completes.
//
// PREPARE transitions to COMMIT.
type DeriveRequest_Prepare struct {
	// Checkpoint to commit.
	Checkpoint           protocol1.Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DeriveRequest_Prepare) Reset()         { *m = DeriveRequest_Prepare{} }
func (m *DeriveRequest_Prepare) String() string { return proto.CompactTextString(m) }
func (*DeriveRequest_Prepare) ProtoMessage()    {}
func (*DeriveRequest_Prepare) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{15, 3}
}
func (m *DeriveRequest_Prepare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeriveRequest_Prepare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeriveRequest_Prepare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeriveRequest_Prepare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveRequest_Prepare.Merge(m, src)
}
func (m *DeriveRequest_Prepare) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DeriveRequest_Prepare) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveRequest_Prepare.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveRequest_Prepare proto.InternalMessageInfo

// DeriveResponse is the streamed response message of a Derive RPC.
type DeriveResponse struct {
	// Types that are valid to be assigned to Kind:
	//	*DeriveResponse_Continue_
	//	*DeriveResponse_Flush
	Kind                 isDeriveResponse_Kind `protobuf_oneof:"kind"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DeriveResponse) Reset()         { *m = DeriveResponse{} }
func (m *DeriveResponse) String() string { return proto.CompactTextString(m) }
func (*DeriveResponse) ProtoMessage()    {}
func (*DeriveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{16}
}
func (m *DeriveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeriveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeriveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeriveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveResponse.Merge(m, src)
}
func (m *DeriveResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DeriveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveResponse proto.InternalMessageInfo

type isDeriveResponse_Kind interface {
	isDeriveResponse_Kind()
	MarshalTo([]byte) (int, error)
	ProtoSize() int
}

type DeriveResponse_Continue_ struct {
	Continue *DeriveResponse_Continue `protobuf:"bytes,1,opt,name=continue,proto3,oneof" json:"continue,omitempty"`
}
type DeriveResponse_Flush struct {
	Flush *CombineResponse `protobuf:"bytes,2,opt,name=flush,proto3,oneof" json:"flush,omitempty"`
}

func (*DeriveResponse_Continue_) isDeriveResponse_Kind() {}
func (*DeriveResponse_Flush) isDeriveResponse_Kind()     {}

func (m *DeriveResponse) GetKind() isDeriveResponse_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *DeriveResponse) GetContinue() *DeriveResponse_Continue {
	if x, ok := m.GetKind().(*DeriveResponse_Continue_); ok {
		return x.Continue
	}
	return nil
}

func (m *DeriveResponse) GetFlush() *CombineResponse {
	if x, ok := m.GetKind().(*DeriveResponse_Flush); ok {
		return x.Flush
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeriveResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeriveResponse_Continue_)(nil),
		(*DeriveResponse_Flush)(nil),
	}
}

type DeriveResponse_Continue struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeriveResponse_Continue) Reset()         { *m = DeriveResponse_Continue{} }
func (m *DeriveResponse_Continue) String() string { return proto.CompactTextString(m) }
func (*DeriveResponse_Continue) ProtoMessage()    {}
func (*DeriveResponse_Continue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd0e7f3bbc7f41f, []int{16, 0}
}
func (m *DeriveResponse_Continue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeriveResponse_Continue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeriveResponse_Continue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeriveResponse_Continue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveResponse_Continue.Merge(m, src)
}
func (m *DeriveResponse_Continue) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DeriveResponse_Continue) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveResponse_Continue.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveResponse_Continue proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("flow.Shuffle_Hash", Shuffle_Hash_name, Shuffle_Hash_value)
	proto.RegisterEnum("flow.Field_Value_Kind", Field_Value_Kind_name, Field_Value_Kind_value)
	proto.RegisterType((*Slice)(nil), "flow.Slice")
	proto.RegisterType((*UUIDParts)(nil), "flow.UUIDParts")
	proto.RegisterType((*Shuffle)(nil), "flow.Shuffle")
	proto.RegisterType((*JournalShuffle)(nil), "flow.JournalShuffle")
	proto.RegisterType((*Projection)(nil), "flow.Projection")
	proto.RegisterType((*CollectionSpec)(nil), "flow.CollectionSpec")
	proto.RegisterType((*TransformSpec)(nil), "flow.TransformSpec")
	proto.RegisterType((*TransformSpec_Source)(nil), "flow.TransformSpec.Source")
	proto.RegisterType((*TransformSpec_Derivation)(nil), "flow.TransformSpec.Derivation")
	proto.RegisterType((*Field)(nil), "flow.Field")
	proto.RegisterType((*Field_Value)(nil), "flow.Field.Value")
	proto.RegisterType((*RangeSpec)(nil), "flow.RangeSpec")
	proto.RegisterType((*ShuffleRequest)(nil), "flow.ShuffleRequest")
	proto.RegisterType((*ShuffleResponse)(nil), "flow.ShuffleResponse")
	proto.RegisterType((*ExtractRequest)(nil), "flow.ExtractRequest")
	proto.RegisterType((*ExtractResponse)(nil), "flow.ExtractResponse")
	proto.RegisterType((*CombineRequest)(nil), "flow.CombineRequest")
	proto.RegisterType((*CombineRequest_Open)(nil), "flow.CombineRequest.Open")
	proto.RegisterType((*CombineRequest_Continue)(nil), "flow.CombineRequest.Continue")
	proto.RegisterType((*CombineResponse)(nil), "flow.CombineResponse")
	proto.RegisterType((*DeriveRequest)(nil), "flow.DeriveRequest")
	proto.RegisterType((*DeriveRequest_Open)(nil), "flow.DeriveRequest.Open")
	proto.RegisterType((*DeriveRequest_Continue)(nil), "flow.DeriveRequest.Continue")
	proto.RegisterType((*DeriveRequest_Flush)(nil), "flow.DeriveRequest.Flush")
	proto.RegisterType((*DeriveRequest_Prepare)(nil), "flow.DeriveRequest.Prepare")
	proto.RegisterType((*DeriveResponse)(nil), "flow.DeriveResponse")
	proto.RegisterType((*DeriveResponse_Continue)(nil), "flow.DeriveResponse.Continue")
}

func init() { proto.RegisterFile("go/protocol/flow.proto", fileDescriptor_9dd0e7f3bbc7f41f) }

var fileDescriptor_9dd0e7f3bbc7f41f = []byte{
	// 2075 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4b, 0x6f, 0x23, 0x59,
	0x15, 0x76, 0xd9, 0xe5, 0x47, 0x1d, 0xe7, 0xe1, 0xbe, 0xa4, 0x7b, 0xdc, 0x1e, 0x3a, 0x4e, 0x5b,
	0x9a, 0x26, 0xf4, 0xd0, 0x95, 0xb4, 0x19, 0x7a, 0x5a, 0x69, 0x0d, 0x22, 0x8e, 0x9d, 0x49, 0xba,
	0xd3, 0x49, 0x28, 0x27, 0x23, 0x1e, 0x0b, 0xab, 0x5c, 0x75, 0x6d, 0x57, 0xbb, 0x5c, 0xd7, 0xdc,
	0xaa, 0xea, 0xc1, 0xb0, 0x46, 0x62, 0x83, 0x18, 0x89, 0x0d, 0x12, 0x9b, 0x61, 0xe0, 0x0f, 0x20,
	0xb6, 0x6c, 0xd8, 0xf5, 0xb2, 0x7f, 0x41, 0x24, 0x06, 0x89, 0xc7, 0x86, 0x1d, 0x12, 0xca, 0x0a,
	0xdd, 0x47, 0x95, 0x1f, 0x71, 0x66, 0xd2, 0x11, 0x6c, 0xa2, 0x5b, 0xe7, 0x7e, 0xe7, 0x3e, 0xbe,
	0xf3, 0x9d, 0x7b, 0x8e, 0x03, 0xb7, 0xba, 0x64, 0x63, 0x48, 0x49, 0x40, 0x2c, 0xe2, 0x6e, 0x74,
	0x5c, 0xf2, 0xb1, 0xce, 0xbf, 0x90, 0xca, 0xc6, 0xa5, 0xd5, 0x36, 0x25, 0x7d, 0x4c, 0xc7, 0x88,
	0x68, 0x20, 0x50, 0xa5, 0x35, 0x8b, 0x78, 0x7e, 0x38, 0xf8, 0x02, 0xc4, 0xbd, 0x18, 0x41, 0xb1,
	0x45, 0x5e, 0x62, 0x3a, 0x72, 0x49, 0x97, 0x8f, 0xa9, 0x8d, 0xed, 0x16, 0x19, 0x4a, 0x5c, 0x71,
	0x18, 0x8c, 0x86, 0xd8, 0xdf, 0xc0, 0x83, 0x61, 0x30, 0x12, 0x7f, 0xe5, 0xcc, 0x4a, 0x97, 0x74,
	0x09, 0x1f, 0x6e, 0xb0, 0x91, 0xb0, 0x56, 0x3e, 0x80, 0x74, 0xd3, 0x75, 0x2c, 0x8c, 0x56, 0x20,
	0xdd, 0xc6, 0x5d, 0xc7, 0x2b, 0x2a, 0x6b, 0xca, 0xfa, 0xa2, 0x21, 0x3e, 0x50, 0x01, 0x52, 0xd8,
	0xb3, 0x8b, 0x49, 0x6e, 0x63, 0xc3, 0xad, 0x85, 0xd7, 0xbf, 0x2d, 0x27, 0x3e, 0xf9, 0xac, 0x9c,
	0xf8, 0xf5, 0x67, 0xe5, 0x44, 0xe5, 0xe7, 0x0a, 0x68, 0xa7, 0xa7, 0xfb, 0xf5, 0x63, 0x93, 0x06,
	0x3e, 0xfa, 0x06, 0xa0, 0x21, 0x25, 0x76, 0x68, 0x61, 0xda, 0x32, 0x3d, 0xbb, 0xd5, 0x71, 0xcd,
	0xae, 0xcf, 0x17, 0xcc, 0x18, 0x85, 0x68, 0x66, 0xdb, 0xb3, 0x77, 0x99, 0x1d, 0x3d, 0x81, 0xb4,
	0xe5, 0x12, 0xab, 0xcf, 0x57, 0xcf, 0xd4, 0xde, 0x39, 0x3f, 0x2b, 0xdf, 0xed, 0x12, 0xbd, 0x6b,
	0xfe, 0x04, 0x07, 0x01, 0xd6, 0x6d, 0xfc, 0x72, 0xc3, 0x22, 0x14, 0x6f, 0x0c, 0xb0, 0xef, 0x9b,
	0x5d, 0xac, 0xef, 0x30, 0xb0, 0x21, 0x7c, 0xb6, 0x0a, 0xff, 0xf8, 0xb4, 0xac, 0x4c, 0x1d, 0xe5,
	0x3f, 0x0a, 0x64, 0x9b, 0xbd, 0xb0, 0xd3, 0x71, 0x31, 0xba, 0x07, 0xcb, 0xbe, 0x18, 0xb6, 0xfa,
	0x78, 0xd4, 0x1a, 0x06, 0xb4, 0xa8, 0xac, 0xa5, 0xd6, 0x35, 0x63, 0x51, 0x9a, 0x9f, 0xe1, 0xd1,
	0x71, 0x40, 0x19, 0x2e, 0xf4, 0xb1, 0xdf, 0xf2, 0x49, 0x48, 0x2d, 0x8e, 0xe5, 0x87, 0xc9, 0x19,
	0x8b, 0xcc, 0xdc, 0xe4, 0xd6, 0x67, 0x78, 0xc4, 0x70, 0x1d, 0xc7, 0x0d, 0x30, 0x6d, 0xd1, 0x16,
	0xdf, 0xdf, 0x2f, 0xa6, 0x04, 0x4e, 0x98, 0x0d, 0x7e, 0x36, 0x1f, 0xdd, 0x03, 0xb5, 0x67, 0xfa,
	0xbd, 0xa2, 0xba, 0xa6, 0xac, 0x2f, 0x55, 0x91, 0xce, 0x85, 0x20, 0x0f, 0xa5, 0xef, 0x99, 0x7e,
	0xcf, 0xe0, 0xf3, 0x8c, 0x28, 0x8a, 0x4d, 0xbb, 0x65, 0x63, 0xd7, 0x1c, 0xb5, 0x7c, 0x6c, 0x11,
	0xcf, 0xf6, 0x8b, 0x69, 0xce, 0x72, 0x81, 0xcd, 0xd4, 0xd9, 0x44, 0x53, 0xd8, 0x2b, 0xb7, 0x41,
	0x65, 0xbe, 0x28, 0x07, 0xea, 0xe1, 0xd1, 0x61, 0xa3, 0x90, 0x40, 0x59, 0x48, 0x3d, 0xaf, 0x7f,
	0xab, 0xa0, 0x6c, 0xa9, 0x8c, 0x86, 0xca, 0x3f, 0x15, 0x58, 0x7a, 0x4a, 0x42, 0xea, 0x99, 0x6e,
	0xc4, 0xc0, 0x3e, 0x64, 0x5f, 0x08, 0x0b, 0xe7, 0x5f, 0xab, 0x6d, 0x9c, 0x9f, 0x95, 0xdf, 0x9d,
	0x47, 0xef, 0x8c, 0x34, 0x75, 0xb9, 0x90, 0x11, 0xf9, 0xa3, 0x26, 0xe4, 0x2d, 0x42, 0xa8, 0xed,
	0x78, 0x66, 0x40, 0x28, 0x27, 0x48, 0xab, 0x3d, 0x3c, 0x3f, 0x2b, 0x3f, 0x98, 0xb7, 0xdc, 0x05,
	0x25, 0xeb, 0xcd, 0x9e, 0x49, 0xed, 0xfd, 0xba, 0x31, 0xb9, 0x0a, 0x7a, 0x08, 0x59, 0x19, 0x0a,
	0xce, 0x64, 0xbe, 0xba, 0x38, 0x45, 0x56, 0x2d, 0xf7, 0xea, 0xac, 0x9c, 0x78, 0x7d, 0x56, 0x56,
	0x8c, 0x08, 0x27, 0xef, 0xba, 0x0b, 0x70, 0x4c, 0xc9, 0x0b, 0x6c, 0x05, 0x0e, 0xe1, 0xfa, 0x14,
	0xc1, 0x55, 0xd6, 0x35, 0x83, 0x0d, 0x99, 0x8e, 0x3b, 0x0e, 0x76, 0x85, 0x66, 0x35, 0x43, 0x7c,
	0xcc, 0x91, 0xcb, 0xdf, 0x93, 0xb0, 0xb4, 0x43, 0x5c, 0x57, 0x2c, 0xd4, 0x1c, 0x62, 0x0b, 0x55,
	0x40, 0xf5, 0xcc, 0x01, 0x96, 0x84, 0x2d, 0x9d, 0x9f, 0x95, 0x61, 0x8c, 0x30, 0xf8, 0x1c, 0xba,
	0x03, 0xe0, 0x5b, 0x3d, 0x3c, 0x30, 0x5b, 0x21, 0x75, 0xe4, 0x1e, 0x9a, 0xb0, 0x9c, 0x52, 0x07,
	0xdd, 0x86, 0x9c, 0x14, 0x1c, 0x53, 0x08, 0x53, 0x5c, 0xb6, 0xcf, 0xa5, 0xe6, 0xb3, 0xa9, 0x30,
	0x74, 0x6c, 0x2e, 0x46, 0x95, 0xfb, 0x65, 0xd9, 0x37, 0x93, 0xe1, 0x23, 0x80, 0xa1, 0x49, 0x03,
	0x87, 0xed, 0xc3, 0x64, 0x90, 0x5a, 0xcf, 0x57, 0x0b, 0x82, 0x8f, 0xf1, 0x5d, 0x6b, 0x2a, 0xa3,
	0xc4, 0x98, 0x40, 0xa2, 0xc7, 0x90, 0x1f, 0xc6, 0xf3, 0x7e, 0x31, 0xf3, 0x85, 0x8e, 0x93, 0x50,
	0xf4, 0x6d, 0x58, 0x90, 0xe1, 0x6d, 0xf9, 0x43, 0x6c, 0x15, 0xb3, 0x3c, 0x06, 0x37, 0xf5, 0x59,
	0x15, 0x30, 0x5e, 0x22, 0xff, 0x17, 0x63, 0x13, 0xba, 0x0f, 0x37, 0x4c, 0xab, 0xdf, 0x7a, 0xe1,
	0x13, 0xaf, 0x15, 0xe0, 0xc1, 0xd0, 0x35, 0x03, 0x5c, 0xcc, 0xad, 0x29, 0xeb, 0x0b, 0xc6, 0xb2,
	0x69, 0xf5, 0x9f, 0xfa, 0xc4, 0x3b, 0x91, 0xe6, 0xca, 0xef, 0x53, 0xb0, 0x78, 0x42, 0x4d, 0xcf,
	0xef, 0x10, 0x3a, 0xe0, 0xde, 0x77, 0xa7, 0x88, 0x5e, 0x3c, 0x3f, 0x2b, 0x6b, 0x31, 0x40, 0xf2,
	0x5c, 0x81, 0x45, 0xcb, 0x0c, 0x4c, 0x97, 0x74, 0x5b, 0x76, 0xbb, 0xe5, 0x88, 0x70, 0xa6, 0x8d,
	0xbc, 0x34, 0xd6, 0xdb, 0xfb, 0x36, 0x7a, 0x0c, 0x19, 0x91, 0xb8, 0x52, 0x42, 0x25, 0x71, 0xf3,
	0xa9, 0xbd, 0x74, 0x91, 0xc4, 0xf2, 0x0e, 0x12, 0x8f, 0x1e, 0x8c, 0xd5, 0xa7, 0xce, 0x53, 0x9f,
	0x40, 0x47, 0x18, 0x54, 0x07, 0xb0, 0x31, 0x75, 0x5e, 0x9a, 0x8c, 0x3c, 0x9e, 0xa6, 0xf9, 0xea,
	0xea, 0xbc, 0xcd, 0xea, 0x31, 0x2a, 0x8a, 0xd6, 0xd8, 0xaf, 0xd4, 0x87, 0x8c, 0x38, 0xcc, 0x95,
	0x84, 0xf6, 0xc1, 0x94, 0x26, 0x92, 0x7c, 0xcf, 0xb7, 0xc6, 0xf1, 0x39, 0x30, 0xdb, 0xd8, 0x6d,
	0x62, 0xe6, 0x43, 0xe8, 0x45, 0x69, 0x94, 0x36, 0x01, 0xc6, 0x87, 0xb9, 0xca, 0x86, 0x95, 0x7f,
	0x25, 0x21, 0xbd, 0xcb, 0x92, 0x05, 0x6d, 0x40, 0xe6, 0xa5, 0xe9, 0x86, 0xd8, 0xe7, 0x8f, 0x66,
	0xbe, 0x7a, 0x43, 0x5c, 0x95, 0x4f, 0xea, 0x1f, 0xb1, 0x99, 0x88, 0x4e, 0x01, 0x2b, 0xfd, 0x31,
	0x09, 0x69, 0x6e, 0x47, 0xf7, 0x41, 0xed, 0x3b, 0x9e, 0xcd, 0x37, 0x5a, 0xaa, 0xde, 0xba, 0xe0,
	0xa8, 0x3f, 0x73, 0x3c, 0xdb, 0xe0, 0x18, 0x54, 0x82, 0x5c, 0xe8, 0xf9, 0x4e, 0xd7, 0xc3, 0x22,
	0xba, 0xaa, 0x11, 0x7f, 0xa3, 0x5b, 0x90, 0x91, 0x33, 0x2c, 0xb4, 0xc8, 0xc8, 0x8c, 0xed, 0x36,
	0x09, 0xdb, 0x32, 0x6e, 0x8a, 0x21, 0xbf, 0xd0, 0xd7, 0x20, 0xdd, 0x1e, 0x05, 0xd8, 0x97, 0xc1,
	0xc9, 0xcb, 0x70, 0xb2, 0xca, 0x26, 0xcf, 0x2a, 0xe6, 0x2b, 0x3f, 0x05, 0x95, 0x1d, 0x01, 0xe5,
	0x21, 0xbb, 0x7f, 0xf8, 0xd1, 0xf6, 0xc1, 0x7e, 0xbd, 0x90, 0xe0, 0x0f, 0xeb, 0xe9, 0xc1, 0x41,
	0x41, 0x61, 0xa3, 0x13, 0xe3, 0xb4, 0x51, 0x48, 0x22, 0x0d, 0xd2, 0xbb, 0xdb, 0x07, 0xcd, 0x46,
	0x21, 0x85, 0x00, 0x32, 0xcd, 0x13, 0x63, 0xff, 0xf0, 0xc3, 0x82, 0x8a, 0x16, 0x20, 0x77, 0x7a,
	0xd8, 0xdc, 0xff, 0xf0, 0xb0, 0x51, 0x2f, 0xa4, 0xf9, 0x8c, 0x18, 0x67, 0xd8, 0xb8, 0x7e, 0x74,
	0x5a, 0x3b, 0x68, 0x14, 0xb2, 0x6c, 0x7c, 0x54, 0x7b, 0xda, 0xd8, 0x39, 0x29, 0xe4, 0xd8, 0x42,
	0xdb, 0x86, 0xb1, 0xfd, 0xfd, 0x82, 0x36, 0x53, 0x3b, 0x7f, 0xa6, 0x80, 0x66, 0x98, 0x5e, 0x17,
	0xf3, 0x9c, 0x78, 0x1b, 0x34, 0xf6, 0x72, 0x88, 0x1a, 0x9c, 0xe4, 0x99, 0xc4, 0x9e, 0x92, 0x1a,
	0x2f, 0xc3, 0x6f, 0x01, 0x7b, 0x46, 0x5a, 0xac, 0x14, 0xa7, 0xf8, 0x54, 0xa6, 0x8f, 0x47, 0x0d,
	0xcf, 0x66, 0x69, 0x22, 0x2b, 0x92, 0xf4, 0x54, 0x39, 0x91, 0x79, 0xca, 0x0b, 0x92, 0x70, 0x5e,
	0x85, 0x7c, 0x84, 0x61, 0x0b, 0xa4, 0x39, 0x42, 0x13, 0x88, 0x86, 0x67, 0x57, 0xfe, 0x94, 0x84,
	0x25, 0x29, 0x7c, 0x03, 0xff, 0x28, 0xc4, 0x7e, 0x80, 0xde, 0x1b, 0xe7, 0x87, 0xc2, 0x09, 0x5d,
	0x11, 0x84, 0x4e, 0x17, 0x99, 0xd9, 0x34, 0x79, 0x17, 0xd2, 0x94, 0xdd, 0x47, 0xaa, 0x75, 0x59,
	0xf8, 0xc4, 0x57, 0x8c, 0x02, 0xc1, 0x31, 0x68, 0x17, 0x32, 0xa4, 0xd3, 0xf1, 0x71, 0xc0, 0x6f,
	0x94, 0xaa, 0xe9, 0xe7, 0x67, 0xe5, 0xfb, 0x57, 0xa9, 0x4f, 0x47, 0xdc, 0xcb, 0x90, 0xde, 0xe8,
	0x39, 0x00, 0xf6, 0xec, 0x96, 0x5c, 0x4b, 0xbd, 0xd6, 0x5a, 0x1a, 0xf6, 0x6c, 0x31, 0x44, 0x9b,
	0x00, 0x14, 0xfb, 0xc4, 0x0d, 0x27, 0x52, 0xbd, 0x30, 0x4e, 0xbb, 0x3d, 0x6c, 0xda, 0x98, 0x1a,
	0x13, 0x98, 0xca, 0xef, 0xd2, 0xb0, 0x1c, 0xd3, 0xe7, 0x0f, 0x89, 0xe7, 0x63, 0xb4, 0x0e, 0x19,
	0x3f, 0x30, 0x83, 0xd0, 0x97, 0x89, 0x50, 0xd0, 0xa3, 0xb2, 0xa8, 0x37, 0xb9, 0xdd, 0x90, 0xf3,
	0x0c, 0xd9, 0xe3, 0x6b, 0x4a, 0xd2, 0x2e, 0xee, 0x25, 0xe7, 0xd1, 0x3b, 0xb0, 0x14, 0x60, 0x3a,
	0x70, 0xd8, 0x9b, 0x8d, 0x29, 0x25, 0x94, 0x13, 0xa7, 0x19, 0x8b, 0x91, 0xb5, 0xc1, 0x8c, 0xe8,
	0xbb, 0xb0, 0xc0, 0x5b, 0x8b, 0xa0, 0x47, 0x49, 0xd8, 0xed, 0x5d, 0x93, 0x91, 0x3c, 0x5b, 0xe3,
	0x44, 0x2c, 0xc1, 0x28, 0xfe, 0x98, 0x3a, 0x01, 0x6e, 0xb1, 0x93, 0x70, 0x4e, 0xae, 0x41, 0x31,
	0x5f, 0x81, 0x5d, 0x09, 0x95, 0x21, 0x6d, 0x52, 0xec, 0x99, 0xc5, 0x0c, 0x93, 0x72, 0x4d, 0x3b,
	0x3f, 0x2b, 0xa7, 0xb7, 0x99, 0xc1, 0x10, 0x76, 0xa4, 0x83, 0x66, 0x13, 0xcb, 0xe7, 0xd5, 0xa5,
	0x98, 0xe5, 0x4f, 0xd0, 0x9c, 0x84, 0xce, 0x31, 0x0c, 0x2b, 0x34, 0xa8, 0x1e, 0xb5, 0xae, 0xb9,
	0xb5, 0xd4, 0x35, 0x8e, 0x26, 0x5b, 0xdd, 0xef, 0x88, 0x56, 0x57, 0xbb, 0xd6, 0x1a, 0xcc, 0x15,
	0xbd, 0x07, 0x20, 0x2a, 0x3c, 0x6b, 0x86, 0x8b, 0xc0, 0x0f, 0x2e, 0x93, 0x20, 0xee, 0x91, 0xe5,
	0xe1, 0x35, 0x5e, 0xfa, 0x79, 0xd3, 0xbc, 0xc9, 0x1e, 0x7a, 0xab, 0x8f, 0x6d, 0xde, 0x7e, 0xe6,
	0x2f, 0xbb, 0xae, 0x26, 0x40, 0xac, 0x1b, 0xad, 0x42, 0x7e, 0xa2, 0xbb, 0x2d, 0x2e, 0x4c, 0xba,
	0xf0, 0xb7, 0x36, 0xaa, 0x07, 0xe3, 0x66, 0xb7, 0xf2, 0x1b, 0x05, 0x96, 0x1a, 0x3f, 0x0e, 0xa8,
	0x69, 0x05, 0x51, 0x92, 0xc7, 0x71, 0x50, 0xae, 0x12, 0x87, 0xe4, 0x97, 0xc7, 0x61, 0xb2, 0xc3,
	0x49, 0x4d, 0x77, 0x38, 0x77, 0x00, 0x78, 0x23, 0x26, 0x3a, 0x23, 0x95, 0x77, 0x46, 0x1a, 0xb7,
	0xb0, 0xde, 0xa8, 0xf2, 0x2b, 0x05, 0x96, 0xe3, 0xd3, 0xc9, 0x1c, 0xfa, 0xd2, 0xe3, 0x4d, 0xd3,
	0x9d, 0xbc, 0x22, 0xdd, 0x5f, 0x87, 0x0c, 0xdf, 0x57, 0xf4, 0x67, 0x73, 0x79, 0x93, 0x80, 0xca,
	0xbf, 0x79, 0x8b, 0x38, 0x68, 0x3b, 0x5e, 0xfc, 0x30, 0x6e, 0x80, 0x4a, 0x86, 0xd8, 0x93, 0xaf,
	0xe2, 0x6d, 0xe1, 0x3b, 0x8d, 0xd1, 0x8f, 0x86, 0xd8, 0xdb, 0x4b, 0x18, 0x1c, 0x88, 0x9e, 0x40,
	0xce, 0x22, 0x5e, 0xe0, 0x78, 0x61, 0xf4, 0x2c, 0xde, 0x99, 0xeb, 0xb4, 0x23, 0x41, 0x7b, 0x09,
	0x23, 0x76, 0x28, 0xfd, 0x52, 0x01, 0x95, 0xad, 0x36, 0xd3, 0x75, 0x2a, 0xb3, 0x5d, 0xa7, 0x2c,
	0x0f, 0x8c, 0xf7, 0x24, 0xa7, 0x36, 0x23, 0x9a, 0xce, 0x19, 0xda, 0x53, 0x33, 0xb4, 0xa3, 0x4d,
	0x58, 0x11, 0x0c, 0xba, 0xa6, 0x85, 0x7b, 0xc4, 0xb5, 0x31, 0x9d, 0x68, 0x4f, 0x11, 0x27, 0x6d,
	0x3c, 0x75, 0x1c, 0xd0, 0xd2, 0x0f, 0x21, 0x17, 0x9d, 0xf4, 0x7f, 0xae, 0x9f, 0x5a, 0x46, 0x34,
	0x0f, 0x95, 0x5f, 0x28, 0xb0, 0x1c, 0xd3, 0x73, 0x55, 0x35, 0xbc, 0xa9, 0x58, 0xdf, 0x40, 0x07,
	0x7f, 0x48, 0xc3, 0x22, 0x6f, 0xa6, 0x62, 0x19, 0xe8, 0x53, 0x32, 0x28, 0x0a, 0xd7, 0x29, 0xc8,
	0xb4, 0x0a, 0xb6, 0x2e, 0xa8, 0xe0, 0xab, 0xf3, 0x7c, 0xe6, 0x89, 0x00, 0x3d, 0x84, 0x74, 0xc7,
	0x0d, 0xfd, 0x9e, 0x6c, 0x72, 0x6f, 0xcf, 0x73, 0xdc, 0x65, 0x80, 0xbd, 0x84, 0x21, 0x90, 0xe8,
	0x7d, 0xc8, 0x0e, 0x29, 0x1e, 0x9a, 0x34, 0x6a, 0x6f, 0xdf, 0x9e, 0xe7, 0x74, 0x2c, 0x20, 0x7b,
	0x09, 0x23, 0x42, 0x97, 0x1e, 0x49, 0xbd, 0xe9, 0x00, 0x56, 0xdc, 0x1f, 0x5e, 0xd2, 0x35, 0x4e,
	0x20, 0x4a, 0x7f, 0x53, 0xfe, 0x8f, 0xba, 0x98, 0x49, 0xf4, 0xd4, 0xb5, 0xde, 0x55, 0xf5, 0x0a,
	0xef, 0xea, 0x5d, 0x58, 0x08, 0xa2, 0x76, 0x9e, 0xfd, 0xe4, 0x60, 0x3f, 0xc4, 0xd2, 0x46, 0x3e,
	0xb6, 0xed, 0xdb, 0xa5, 0xef, 0x41, 0x9a, 0x73, 0x7d, 0x69, 0xea, 0x28, 0x97, 0xa5, 0xce, 0x4c,
	0x2e, 0x26, 0x67, 0x72, 0xb1, 0xd4, 0x80, 0xac, 0x0c, 0x08, 0xda, 0x02, 0xb0, 0x7a, 0xd8, 0xea,
	0x0f, 0x89, 0xe3, 0x05, 0x71, 0x03, 0x16, 0x77, 0x10, 0x3b, 0xf1, 0x5c, 0xf4, 0xce, 0x8f, 0xd1,
	0x71, 0x0e, 0x7d, 0xa2, 0xc0, 0x52, 0x14, 0x6e, 0x99, 0x42, 0x93, 0x4f, 0x91, 0x32, 0xf9, 0x14,
	0x4d, 0xe3, 0xe6, 0xab, 0xf0, 0x41, 0xa4, 0xc2, 0xa4, 0xfc, 0xa5, 0x38, 0xfd, 0x88, 0x09, 0xd7,
	0x58, 0x81, 0x25, 0x18, 0xeb, 0x21, 0x3a, 0x52, 0xb5, 0x0e, 0x39, 0xd9, 0x27, 0x51, 0xf4, 0x78,
	0xfc, 0xbf, 0x9a, 0x95, 0xa9, 0x9f, 0x5e, 0x52, 0x9c, 0xa5, 0x9b, 0x33, 0x56, 0xb1, 0xc1, 0xa6,
	0x52, 0xdd, 0x86, 0xac, 0xac, 0x14, 0xe8, 0xd1, 0x78, 0x28, 0x17, 0x99, 0xae, 0x70, 0xd1, 0x22,
	0x33, 0x95, 0xa5, 0xda, 0x80, 0xac, 0x3c, 0x38, 0xda, 0x1a, 0x0f, 0x57, 0xe6, 0xbd, 0xcb, 0xa5,
	0xf9, 0x17, 0x5d, 0x57, 0x36, 0x95, 0xea, 0x9f, 0x15, 0xc8, 0x08, 0xea, 0xd0, 0x36, 0xdc, 0x30,
	0xb0, 0x1f, 0x10, 0x8a, 0xc7, 0xc1, 0x41, 0xb7, 0xf4, 0x2e, 0x21, 0x5d, 0x17, 0x8b, 0x8e, 0xae,
	0x1d, 0x76, 0xf4, 0xc6, 0x60, 0x18, 0x8c, 0x4a, 0x73, 0x43, 0x89, 0xde, 0x8f, 0x17, 0xfb, 0xca,
	0x9c, 0x64, 0x2d, 0xad, 0xcc, 0x0b, 0x15, 0x3b, 0x06, 0x7a, 0x02, 0x50, 0x0b, 0x1d, 0xd7, 0xde,
	0x73, 0xbc, 0xc0, 0xbf, 0x74, 0xd3, 0x9b, 0xfa, 0xc4, 0xff, 0x0d, 0xf5, 0xdd, 0xe6, 0x73, 0x0e,
	0xaf, 0x95, 0x5e, 0xfd, 0x65, 0x35, 0xf1, 0xea, 0xf3, 0x55, 0xe5, 0xf5, 0xe7, 0xab, 0xca, 0xa7,
	0x7f, 0x5d, 0x55, 0x7e, 0x90, 0x8b, 0x5a, 0x9b, 0x76, 0x86, 0x8f, 0xbe, 0xf9, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x9f, 0x1c, 0xf4, 0x54, 0xdb, 0x14, 0x00, 0x00,
}

func (this *UUIDParts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UUIDParts)
	if !ok {
		that2, ok := that.(UUIDParts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProducerAndFlags != that1.ProducerAndFlags {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *Shuffle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Shuffle)
	if !ok {
		that2, ok := that.(Shuffle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ShuffleKeyPtr) != len(that1.ShuffleKeyPtr) {
		return false
	}
	for i := range this.ShuffleKeyPtr {
		if this.ShuffleKeyPtr[i] != that1.ShuffleKeyPtr[i] {
			return false
		}
	}
	if this.UsesSourceKey != that1.UsesSourceKey {
		return false
	}
	if this.FilterRClocks != that1.FilterRClocks {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.ReadDelaySeconds != that1.ReadDelaySeconds {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *JournalShuffle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JournalShuffle)
	if !ok {
		that2, ok := that.(JournalShuffle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Journal != that1.Journal {
		return false
	}
	if this.Coordinator != that1.Coordinator {
		return false
	}
	if !this.Shuffle.Equal(&that1.Shuffle) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Projection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Projection)
	if !ok {
		that2, ok := that.(Projection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ptr != that1.Ptr {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShufflerClient is the client API for Shuffler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShufflerClient interface {
	Shuffle(ctx context.Context, in *ShuffleRequest, opts ...grpc.CallOption) (Shuffler_ShuffleClient, error)
}

type shufflerClient struct {
	cc *grpc.ClientConn
}

func NewShufflerClient(cc *grpc.ClientConn) ShufflerClient {
	return &shufflerClient{cc}
}

func (c *shufflerClient) Shuffle(ctx context.Context, in *ShuffleRequest, opts ...grpc.CallOption) (Shuffler_ShuffleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Shuffler_serviceDesc.Streams[0], "/flow.Shuffler/Shuffle", opts...)
	if err != nil {
		return nil, err
	}
	x := &shufflerShuffleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Shuffler_ShuffleClient interface {
	Recv() (*ShuffleResponse, error)
	grpc.ClientStream
}

type shufflerShuffleClient struct {
	grpc.ClientStream
}

func (x *shufflerShuffleClient) Recv() (*ShuffleResponse, error) {
	m := new(ShuffleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShufflerServer is the server API for Shuffler service.
type ShufflerServer interface {
	Shuffle(*ShuffleRequest, Shuffler_ShuffleServer) error
}

// UnimplementedShufflerServer can be embedded to have forward compatible implementations.
type UnimplementedShufflerServer struct {
}

func (*UnimplementedShufflerServer) Shuffle(req *ShuffleRequest, srv Shuffler_ShuffleServer) error {
	return status.Errorf(codes.Unimplemented, "method Shuffle not implemented")
}

func RegisterShufflerServer(s *grpc.Server, srv ShufflerServer) {
	s.RegisterService(&_Shuffler_serviceDesc, srv)
}

func _Shuffler_Shuffle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShuffleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShufflerServer).Shuffle(m, &shufflerShuffleServer{stream})
}

type Shuffler_ShuffleServer interface {
	Send(*ShuffleResponse) error
	grpc.ServerStream
}

type shufflerShuffleServer struct {
	grpc.ServerStream
}

func (x *shufflerShuffleServer) Send(m *ShuffleResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Shuffler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flow.Shuffler",
	HandlerType: (*ShufflerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Shuffle",
			Handler:       _Shuffler_Shuffle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "go/protocol/flow.proto",
}

// ExtractClient is the client API for Extract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExtractClient interface {
	Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error)
}

type extractClient struct {
	cc *grpc.ClientConn
}

func NewExtractClient(cc *grpc.ClientConn) ExtractClient {
	return &extractClient{cc}
}

func (c *extractClient) Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error) {
	out := new(ExtractResponse)
	err := c.cc.Invoke(ctx, "/flow.Extract/Extract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtractServer is the server API for Extract service.
type ExtractServer interface {
	Extract(context.Context, *ExtractRequest) (*ExtractResponse, error)
}

// UnimplementedExtractServer can be embedded to have forward compatible implementations.
type UnimplementedExtractServer struct {
}

func (*UnimplementedExtractServer) Extract(ctx context.Context, req *ExtractRequest) (*ExtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extract not implemented")
}

func RegisterExtractServer(s *grpc.Server, srv ExtractServer) {
	s.RegisterService(&_Extract_serviceDesc, srv)
}

func _Extract_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.Extract/Extract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractServer).Extract(ctx, req.(*ExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Extract_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flow.Extract",
	HandlerType: (*ExtractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Extract",
			Handler:    _Extract_Extract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/protocol/flow.proto",
}

// CombineClient is the client API for Combine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CombineClient interface {
	Combine(ctx context.Context, opts ...grpc.CallOption) (Combine_CombineClient, error)
}

type combineClient struct {
	cc *grpc.ClientConn
}

func NewCombineClient(cc *grpc.ClientConn) CombineClient {
	return &combineClient{cc}
}

func (c *combineClient) Combine(ctx context.Context, opts ...grpc.CallOption) (Combine_CombineClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Combine_serviceDesc.Streams[0], "/flow.Combine/Combine", opts...)
	if err != nil {
		return nil, err
	}
	x := &combineCombineClient{stream}
	return x, nil
}

type Combine_CombineClient interface {
	Send(*CombineRequest) error
	Recv() (*CombineResponse, error)
	grpc.ClientStream
}

type combineCombineClient struct {
	grpc.ClientStream
}

func (x *combineCombineClient) Send(m *CombineRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *combineCombineClient) Recv() (*CombineResponse, error) {
	m := new(CombineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CombineServer is the server API for Combine service.
type CombineServer interface {
	Combine(Combine_CombineServer) error
}

// UnimplementedCombineServer can be embedded to have forward compatible implementations.
type UnimplementedCombineServer struct {
}

func (*UnimplementedCombineServer) Combine(srv Combine_CombineServer) error {
	return status.Errorf(codes.Unimplemented, "method Combine not implemented")
}

func RegisterCombineServer(s *grpc.Server, srv CombineServer) {
	s.RegisterService(&_Combine_serviceDesc, srv)
}

func _Combine_Combine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CombineServer).Combine(&combineCombineServer{stream})
}

type Combine_CombineServer interface {
	Send(*CombineResponse) error
	Recv() (*CombineRequest, error)
	grpc.ServerStream
}

type combineCombineServer struct {
	grpc.ServerStream
}

func (x *combineCombineServer) Send(m *CombineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *combineCombineServer) Recv() (*CombineRequest, error) {
	m := new(CombineRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Combine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flow.Combine",
	HandlerType: (*CombineServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Combine",
			Handler:       _Combine_Combine_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "go/protocol/flow.proto",
}

// DeriveClient is the client API for Derive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeriveClient interface {
	// RestoreCheckpoint recovers the most recent Checkpoint previously committed
	// to the Store. It is called just once, at Shard start-up. If an external
	// system is used, it should install a transactional "write fence" to ensure
	// that an older Store instance of another process cannot successfully
	// StartCommit after this RestoreCheckpoint returns.
	RestoreCheckpoint(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*protocol1.Checkpoint, error)
	// Derive begins a pipelined derive transaction, following the
	// state machine detailed in DeriveState.
	Derive(ctx context.Context, opts ...grpc.CallOption) (Derive_DeriveClient, error)
	// BuildHints returns FSMHints which may be played back to fully reconstruct
	// the local filesystem state produced by this derive worker. It may block
	// while pending operations sync to the recovery log.
	BuildHints(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*recoverylog.FSMHints, error)
}

type deriveClient struct {
	cc *grpc.ClientConn
}

func NewDeriveClient(cc *grpc.ClientConn) DeriveClient {
	return &deriveClient{cc}
}

func (c *deriveClient) RestoreCheckpoint(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*protocol1.Checkpoint, error) {
	out := new(protocol1.Checkpoint)
	err := c.cc.Invoke(ctx, "/flow.Derive/RestoreCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deriveClient) Derive(ctx context.Context, opts ...grpc.CallOption) (Derive_DeriveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Derive_serviceDesc.Streams[0], "/flow.Derive/Derive", opts...)
	if err != nil {
		return nil, err
	}
	x := &deriveDeriveClient{stream}
	return x, nil
}

type Derive_DeriveClient interface {
	Send(*DeriveRequest) error
	Recv() (*DeriveResponse, error)
	grpc.ClientStream
}

type deriveDeriveClient struct {
	grpc.ClientStream
}

func (x *deriveDeriveClient) Send(m *DeriveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deriveDeriveClient) Recv() (*DeriveResponse, error) {
	m := new(DeriveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deriveClient) BuildHints(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*recoverylog.FSMHints, error) {
	out := new(recoverylog.FSMHints)
	err := c.cc.Invoke(ctx, "/flow.Derive/BuildHints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeriveServer is the server API for Derive service.
type DeriveServer interface {
	// RestoreCheckpoint recovers the most recent Checkpoint previously committed
	// to the Store. It is called just once, at Shard start-up. If an external
	// system is used, it should install a transactional "write fence" to ensure
	// that an older Store instance of another process cannot successfully
	// StartCommit after this RestoreCheckpoint returns.
	RestoreCheckpoint(context.Context, *empty.Empty) (*protocol1.Checkpoint, error)
	// Derive begins a pipelined derive transaction, following the
	// state machine detailed in DeriveState.
	Derive(Derive_DeriveServer) error
	// BuildHints returns FSMHints which may be played back to fully reconstruct
	// the local filesystem state produced by this derive worker. It may block
	// while pending operations sync to the recovery log.
	BuildHints(context.Context, *empty.Empty) (*recoverylog.FSMHints, error)
}

// UnimplementedDeriveServer can be embedded to have forward compatible implementations.
type UnimplementedDeriveServer struct {
}

func (*UnimplementedDeriveServer) RestoreCheckpoint(ctx context.Context, req *empty.Empty) (*protocol1.Checkpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreCheckpoint not implemented")
}
func (*UnimplementedDeriveServer) Derive(srv Derive_DeriveServer) error {
	return status.Errorf(codes.Unimplemented, "method Derive not implemented")
}
func (*UnimplementedDeriveServer) BuildHints(ctx context.Context, req *empty.Empty) (*recoverylog.FSMHints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildHints not implemented")
}

func RegisterDeriveServer(s *grpc.Server, srv DeriveServer) {
	s.RegisterService(&_Derive_serviceDesc, srv)
}

func _Derive_RestoreCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeriveServer).RestoreCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.Derive/RestoreCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeriveServer).RestoreCheckpoint(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Derive_Derive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeriveServer).Derive(&deriveDeriveServer{stream})
}

type Derive_DeriveServer interface {
	Send(*DeriveResponse) error
	Recv() (*DeriveRequest, error)
	grpc.ServerStream
}

type deriveDeriveServer struct {
	grpc.ServerStream
}

func (x *deriveDeriveServer) Send(m *DeriveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deriveDeriveServer) Recv() (*DeriveRequest, error) {
	m := new(DeriveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Derive_BuildHints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeriveServer).BuildHints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.Derive/BuildHints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeriveServer).BuildHints(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Derive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flow.Derive",
	HandlerType: (*DeriveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RestoreCheckpoint",
			Handler:    _Derive_RestoreCheckpoint_Handler,
		},
		{
			MethodName: "BuildHints",
			Handler:    _Derive_BuildHints_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Derive",
			Handler:       _Derive_Derive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "go/protocol/flow.proto",
}

func (m *Slice) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Slice) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Slice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x10
	}
	if m.Begin != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.Begin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UUIDParts) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UUIDParts) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UUIDParts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Clock))
		i--
		dAtA[i] = 0x11
	}
	if m.ProducerAndFlags != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ProducerAndFlags))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Shuffle) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shuffle) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Shuffle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReadDelaySeconds != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.ReadDelaySeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.Hash != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x20
	}
	if m.FilterRClocks {
		i--
		if m.FilterRClocks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.UsesSourceKey {
		i--
		if m.UsesSourceKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ShuffleKeyPtr) > 0 {
		for iNdEx := len(m.ShuffleKeyPtr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShuffleKeyPtr[iNdEx])
			copy(dAtA[i:], m.ShuffleKeyPtr[iNdEx])
			i = encodeVarintFlow(dAtA, i, uint64(len(m.ShuffleKeyPtr[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JournalShuffle) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JournalShuffle) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JournalShuffle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Shuffle.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Coordinator) > 0 {
		i -= len(m.Coordinator)
		copy(dAtA[i:], m.Coordinator)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Coordinator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Journal) > 0 {
		i -= len(m.Journal)
		copy(dAtA[i:], m.Journal)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Journal)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Projection) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Projection) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Projection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ptr) > 0 {
		i -= len(m.Ptr)
		copy(dAtA[i:], m.Ptr)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Ptr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectionSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AckJsonTemplate) > 0 {
		i -= len(m.AckJsonTemplate)
		copy(dAtA[i:], m.AckJsonTemplate)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.AckJsonTemplate)))
		i--
		dAtA[i] = 0x42
	}
	{
		size, err := m.JournalSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Projections) > 0 {
		for iNdEx := len(m.Projections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Projections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Partitions) > 0 {
		for iNdEx := len(m.Partitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Partitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.UuidPtr) > 0 {
		i -= len(m.UuidPtr)
		copy(dAtA[i:], m.UuidPtr)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.UuidPtr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.KeyPtrs) > 0 {
		for iNdEx := len(m.KeyPtrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyPtrs[iNdEx])
			copy(dAtA[i:], m.KeyPtrs[iNdEx])
			i = encodeVarintFlow(dAtA, i, uint64(len(m.KeyPtrs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SchemaUri) > 0 {
		i -= len(m.SchemaUri)
		copy(dAtA[i:], m.SchemaUri)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.SchemaUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransformSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransformSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransformSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Derivation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Shuffle.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CatalogDbId != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.CatalogDbId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransformSpec_Source) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransformSpec_Source) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransformSpec_Source) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Partitions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransformSpec_Derivation) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransformSpec_Derivation) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransformSpec_Derivation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Field) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Field) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Field_Value) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Field_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Bytes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Double != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Double))))
		i--
		dAtA[i] = 0x21
	}
	if m.Signed != 0 {
		i = encodeVarintFlow(dAtA, i, uint64((uint64(m.Signed)<<1)^uint64((m.Signed>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.Unsigned != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.Unsigned))
		i--
		dAtA[i] = 0x10
	}
	if m.Kind != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RangeSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RClockEnd != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.RClockEnd))
		i--
		dAtA[i] = 0x28
	}
	if m.RClockBegin != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.RClockBegin))
		i--
		dAtA[i] = 0x20
	}
	if len(m.KeyEnd) > 0 {
		i -= len(m.KeyEnd)
		copy(dAtA[i:], m.KeyEnd)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.KeyEnd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyBegin) > 0 {
		i -= len(m.KeyBegin)
		copy(dAtA[i:], m.KeyBegin)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.KeyBegin)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ShuffleRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShuffleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShuffleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resolution != nil {
		{
			size, err := m.Resolution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.EndOffset != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.EndOffset))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Shuffle.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ShuffleResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShuffleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShuffleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShuffleKey) > 0 {
		for iNdEx := len(m.ShuffleKey) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShuffleKey[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.PackedKey) > 0 {
		for iNdEx := len(m.PackedKey) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PackedKey[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.UuidParts) > 0 {
		for iNdEx := len(m.UuidParts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UuidParts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.End) > 0 {
		dAtA12 := make([]byte, len(m.End)*10)
		var j11 int
		for _, num1 := range m.End {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintFlow(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Begin) > 0 {
		dAtA14 := make([]byte, len(m.Begin)*10)
		var j13 int
		for _, num1 := range m.Begin {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintFlow(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DocsJson) > 0 {
		for iNdEx := len(m.DocsJson) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DocsJson[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Arena) > 0 {
		i -= len(m.Arena)
		copy(dAtA[i:], m.Arena)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Arena)))
		i--
		dAtA[i] = 0x32
	}
	if m.WriteHead != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.WriteHead))
		i--
		dAtA[i] = 0x28
	}
	if m.ReadThrough != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.ReadThrough))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TerminalError) > 0 {
		i -= len(m.TerminalError)
		copy(dAtA[i:], m.TerminalError)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.TerminalError)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExtractRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FieldPtrs) > 0 {
		for iNdEx := len(m.FieldPtrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FieldPtrs[iNdEx])
			copy(dAtA[i:], m.FieldPtrs[iNdEx])
			i = encodeVarintFlow(dAtA, i, uint64(len(m.FieldPtrs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.UuidPtr) > 0 {
		i -= len(m.UuidPtr)
		copy(dAtA[i:], m.UuidPtr)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.UuidPtr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DocsJson) > 0 {
		for iNdEx := len(m.DocsJson) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DocsJson[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Arena) > 0 {
		i -= len(m.Arena)
		copy(dAtA[i:], m.Arena)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Arena)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtractResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.UuidParts) > 0 {
		for iNdEx := len(m.UuidParts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UuidParts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Arena) > 0 {
		i -= len(m.Arena)
		copy(dAtA[i:], m.Arena)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Arena)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CombineRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CombineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CombineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Kind != nil {
		{
			size := m.Kind.ProtoSize()
			i -= size
			if _, err := m.Kind.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CombineRequest_Open_) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CombineRequest_Open_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Open != nil {
		{
			size, err := m.Open.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CombineRequest_Continue_) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CombineRequest_Continue_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Continue != nil {
		{
			size, err := m.Continue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CombineRequest_Open) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CombineRequest_Open) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CombineRequest_Open) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UuidPlaceholderPtr) > 0 {
		i -= len(m.UuidPlaceholderPtr)
		copy(dAtA[i:], m.UuidPlaceholderPtr)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.UuidPlaceholderPtr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FieldPtrs) > 0 {
		for iNdEx := len(m.FieldPtrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FieldPtrs[iNdEx])
			copy(dAtA[i:], m.FieldPtrs[iNdEx])
			i = encodeVarintFlow(dAtA, i, uint64(len(m.FieldPtrs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.KeyPtr) > 0 {
		for iNdEx := len(m.KeyPtr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyPtr[iNdEx])
			copy(dAtA[i:], m.KeyPtr[iNdEx])
			i = encodeVarintFlow(dAtA, i, uint64(len(m.KeyPtr[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SchemaUri) > 0 {
		i -= len(m.SchemaUri)
		copy(dAtA[i:], m.SchemaUri)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.SchemaUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CombineRequest_Continue) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CombineRequest_Continue) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CombineRequest_Continue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DocsJson) > 0 {
		for iNdEx := len(m.DocsJson) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DocsJson[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Arena) > 0 {
		i -= len(m.Arena)
		copy(dAtA[i:], m.Arena)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Arena)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CombineResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CombineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CombineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DocsJson) > 0 {
		for iNdEx := len(m.DocsJson) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DocsJson[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Arena) > 0 {
		i -= len(m.Arena)
		copy(dAtA[i:], m.Arena)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Arena)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeriveRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeriveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Kind != nil {
		{
			size := m.Kind.ProtoSize()
			i -= size
			if _, err := m.Kind.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeriveRequest_Open_) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveRequest_Open_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Open != nil {
		{
			size, err := m.Open.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DeriveRequest_Continue_) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveRequest_Continue_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Continue != nil {
		{
			size, err := m.Continue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DeriveRequest_Flush_) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveRequest_Flush_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Flush != nil {
		{
			size, err := m.Flush.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DeriveRequest_Prepare_) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveRequest_Prepare_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Prepare != nil {
		{
			size, err := m.Prepare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DeriveRequest_Open) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeriveRequest_Open) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveRequest_Open) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeriveRequest_Continue) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeriveRequest_Continue) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveRequest_Continue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TransformId) > 0 {
		dAtA23 := make([]byte, len(m.TransformId)*10)
		var j22 int
		for _, num1 := range m.TransformId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintFlow(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PackedKey) > 0 {
		for iNdEx := len(m.PackedKey) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PackedKey[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.UuidParts) > 0 {
		for iNdEx := len(m.UuidParts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UuidParts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DocsJson) > 0 {
		for iNdEx := len(m.DocsJson) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DocsJson[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Arena) > 0 {
		i -= len(m.Arena)
		copy(dAtA[i:], m.Arena)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Arena)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeriveRequest_Flush) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeriveRequest_Flush) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveRequest_Flush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FieldPtrs) > 0 {
		for iNdEx := len(m.FieldPtrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FieldPtrs[iNdEx])
			copy(dAtA[i:], m.FieldPtrs[iNdEx])
			i = encodeVarintFlow(dAtA, i, uint64(len(m.FieldPtrs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UuidPlaceholderPtr) > 0 {
		i -= len(m.UuidPlaceholderPtr)
		copy(dAtA[i:], m.UuidPlaceholderPtr)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.UuidPlaceholderPtr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeriveRequest_Prepare) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeriveRequest_Prepare) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveRequest_Prepare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DeriveResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeriveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Kind != nil {
		{
			size := m.Kind.ProtoSize()
			i -= size
			if _, err := m.Kind.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeriveResponse_Continue_) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveResponse_Continue_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Continue != nil {
		{
			size, err := m.Continue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DeriveResponse_Flush) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveResponse_Flush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Flush != nil {
		{
			size, err := m.Flush.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DeriveResponse_Continue) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeriveResponse_Continue) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeriveResponse_Continue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlow(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Slice) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Begin != 0 {
		n += 1 + sovFlow(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovFlow(uint64(m.End))
	}
	return n
}

func (m *UUIDParts) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProducerAndFlags != 0 {
		n += 9
	}
	if m.Clock != 0 {
		n += 9
	}
	return n
}

func (m *Shuffle) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShuffleKeyPtr) > 0 {
		for _, s := range m.ShuffleKeyPtr {
			l = len(s)
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if m.UsesSourceKey {
		n += 2
	}
	if m.FilterRClocks {
		n += 2
	}
	if m.Hash != 0 {
		n += 1 + sovFlow(uint64(m.Hash))
	}
	if m.ReadDelaySeconds != 0 {
		n += 1 + sovFlow(uint64(m.ReadDelaySeconds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JournalShuffle) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Journal)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.Coordinator)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = m.Shuffle.ProtoSize()
	n += 1 + l + sovFlow(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Projection) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ptr)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}

func (m *CollectionSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.SchemaUri)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.KeyPtrs) > 0 {
		for _, s := range m.KeyPtrs {
			l = len(s)
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	l = len(m.UuidPtr)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.Partitions) > 0 {
		for _, e := range m.Partitions {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.Projections) > 0 {
		for _, e := range m.Projections {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	l = m.JournalSpec.ProtoSize()
	n += 1 + l + sovFlow(uint64(l))
	l = len(m.AckJsonTemplate)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransformSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.CatalogDbId != 0 {
		n += 1 + sovFlow(uint64(m.CatalogDbId))
	}
	l = m.Source.ProtoSize()
	n += 1 + l + sovFlow(uint64(l))
	l = m.Shuffle.ProtoSize()
	n += 1 + l + sovFlow(uint64(l))
	l = m.Derivation.ProtoSize()
	n += 1 + l + sovFlow(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransformSpec_Source) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = m.Partitions.ProtoSize()
	n += 1 + l + sovFlow(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransformSpec_Derivation) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Field) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Field_Value) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovFlow(uint64(m.Kind))
	}
	if m.Unsigned != 0 {
		n += 1 + sovFlow(uint64(m.Unsigned))
	}
	if m.Signed != 0 {
		n += 1 + sozFlow(uint64(m.Signed))
	}
	if m.Double != 0 {
		n += 9
	}
	l = m.Bytes.ProtoSize()
	n += 1 + l + sovFlow(uint64(l))
	return n
}

func (m *RangeSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyBegin)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.KeyEnd)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.RClockBegin != 0 {
		n += 1 + sovFlow(uint64(m.RClockBegin))
	}
	if m.RClockEnd != 0 {
		n += 1 + sovFlow(uint64(m.RClockEnd))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShuffleRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shuffle.ProtoSize()
	n += 1 + l + sovFlow(uint64(l))
	l = m.Range.ProtoSize()
	n += 1 + l + sovFlow(uint64(l))
	if m.Offset != 0 {
		n += 1 + sovFlow(uint64(m.Offset))
	}
	if m.EndOffset != 0 {
		n += 1 + sovFlow(uint64(m.EndOffset))
	}
	if m.Resolution != nil {
		l = m.Resolution.ProtoSize()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShuffleResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovFlow(uint64(m.Status))
	}
	if m.Header != nil {
		l = m.Header.ProtoSize()
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.TerminalError)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.ReadThrough != 0 {
		n += 1 + sovFlow(uint64(m.ReadThrough))
	}
	if m.WriteHead != 0 {
		n += 1 + sovFlow(uint64(m.WriteHead))
	}
	l = len(m.Arena)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.DocsJson) > 0 {
		for _, e := range m.DocsJson {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.Begin) > 0 {
		l = 0
		for _, e := range m.Begin {
			l += sovFlow(uint64(e))
		}
		n += 1 + sovFlow(uint64(l)) + l
	}
	if len(m.End) > 0 {
		l = 0
		for _, e := range m.End {
			l += sovFlow(uint64(e))
		}
		n += 1 + sovFlow(uint64(l)) + l
	}
	if len(m.UuidParts) > 0 {
		for _, e := range m.UuidParts {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.PackedKey) > 0 {
		for _, e := range m.PackedKey {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.ShuffleKey) > 0 {
		for _, e := range m.ShuffleKey {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtractRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arena)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.DocsJson) > 0 {
		for _, e := range m.DocsJson {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	l = len(m.UuidPtr)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.FieldPtrs) > 0 {
		for _, s := range m.FieldPtrs {
			l = len(s)
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtractResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arena)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.UuidParts) > 0 {
		for _, e := range m.UuidParts {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CombineRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != nil {
		n += m.Kind.ProtoSize()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CombineRequest_Open_) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Open != nil {
		l = m.Open.ProtoSize()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}
func (m *CombineRequest_Continue_) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Continue != nil {
		l = m.Continue.ProtoSize()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}
func (m *CombineRequest_Open) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaUri)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.KeyPtr) > 0 {
		for _, s := range m.KeyPtr {
			l = len(s)
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.FieldPtrs) > 0 {
		for _, s := range m.FieldPtrs {
			l = len(s)
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	l = len(m.UuidPlaceholderPtr)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CombineRequest_Continue) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arena)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.DocsJson) > 0 {
		for _, e := range m.DocsJson {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CombineResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arena)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.DocsJson) > 0 {
		for _, e := range m.DocsJson {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeriveRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != nil {
		n += m.Kind.ProtoSize()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeriveRequest_Open_) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Open != nil {
		l = m.Open.ProtoSize()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}
func (m *DeriveRequest_Continue_) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Continue != nil {
		l = m.Continue.ProtoSize()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}
func (m *DeriveRequest_Flush_) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flush != nil {
		l = m.Flush.ProtoSize()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}
func (m *DeriveRequest_Prepare_) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prepare != nil {
		l = m.Prepare.ProtoSize()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}
func (m *DeriveRequest_Open) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeriveRequest_Continue) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arena)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.DocsJson) > 0 {
		for _, e := range m.DocsJson {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.UuidParts) > 0 {
		for _, e := range m.UuidParts {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.PackedKey) > 0 {
		for _, e := range m.PackedKey {
			l = e.ProtoSize()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.TransformId) > 0 {
		l = 0
		for _, e := range m.TransformId {
			l += sovFlow(uint64(e))
		}
		n += 1 + sovFlow(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeriveRequest_Flush) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UuidPlaceholderPtr)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.FieldPtrs) > 0 {
		for _, s := range m.FieldPtrs {
			l = len(s)
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeriveRequest_Prepare) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Checkpoint.ProtoSize()
	n += 1 + l + sovFlow(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeriveResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != nil {
		n += m.Kind.ProtoSize()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeriveResponse_Continue_) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Continue != nil {
		l = m.Continue.ProtoSize()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}
func (m *DeriveResponse_Flush) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flush != nil {
		l = m.Flush.ProtoSize()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}
func (m *DeriveResponse_Continue) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFlow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlow(x uint64) (n int) {
	return sovFlow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Slice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Slice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Slice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UUIDParts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UUIDParts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UUIDParts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerAndFlags", wireType)
			}
			m.ProducerAndFlags = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ProducerAndFlags = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Clock = go_gazette_dev_core_message.Clock(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shuffle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shuffle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shuffle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShuffleKeyPtr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShuffleKeyPtr = append(m.ShuffleKeyPtr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsesSourceKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsesSourceKey = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterRClocks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FilterRClocks = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= Shuffle_Hash(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadDelaySeconds", wireType)
			}
			m.ReadDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadDelaySeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JournalShuffle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JournalShuffle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JournalShuffle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Journal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Journal = go_gazette_dev_core_broker_protocol.Journal(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coordinator = go_gazette_dev_core_consumer_protocol.ShardID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shuffle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shuffle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Projection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Projection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Projection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ptr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = Collection(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPtrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPtrs = append(m.KeyPtrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UuidPtr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UuidPtr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = append(m.Partitions, Projection{})
			if err := m.Partitions[len(m.Partitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projections = append(m.Projections, Projection{})
			if err := m.Projections[len(m.Projections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JournalSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JournalSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckJsonTemplate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckJsonTemplate = append(m.AckJsonTemplate[:0], dAtA[iNdEx:postIndex]...)
			if m.AckJsonTemplate == nil {
				m.AckJsonTemplate = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransformSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransformSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransformSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = Transform(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatalogDbId", wireType)
			}
			m.CatalogDbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CatalogDbId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shuffle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shuffle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Derivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Derivation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransformSpec_Source) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Source: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Source: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = Collection(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Partitions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransformSpec_Derivation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Derivation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Derivation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = Collection(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, Field_Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field_Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Field_Value_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsigned", wireType)
			}
			m.Unsigned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unsigned |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signed", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Signed = int64(v)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Double", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Double = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bytes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyBegin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyBegin = append(m.KeyBegin[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyBegin == nil {
				m.KeyBegin = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyEnd", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyEnd = append(m.KeyEnd[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyEnd == nil {
				m.KeyEnd = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RClockBegin", wireType)
			}
			m.RClockBegin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RClockBegin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RClockEnd", wireType)
			}
			m.RClockEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RClockEnd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShuffleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShuffleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShuffleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shuffle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shuffle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= go_gazette_dev_core_broker_protocol.Offset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOffset", wireType)
			}
			m.EndOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndOffset |= go_gazette_dev_core_broker_protocol.Offset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resolution == nil {
				m.Resolution = &protocol.Header{}
			}
			if err := m.Resolution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShuffleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShuffleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShuffleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= protocol1.Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &protocol.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadThrough", wireType)
			}
			m.ReadThrough = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadThrough |= go_gazette_dev_core_broker_protocol.Offset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteHead", wireType)
			}
			m.WriteHead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteHead |= go_gazette_dev_core_broker_protocol.Offset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arena", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arena = append(m.Arena[:0], dAtA[iNdEx:postIndex]...)
			if m.Arena == nil {
				m.Arena = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocsJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocsJson = append(m.DocsJson, Slice{})
			if err := m.DocsJson[len(m.DocsJson)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v go_gazette_dev_core_broker_protocol.Offset
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= go_gazette_dev_core_broker_protocol.Offset(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Begin = append(m.Begin, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Begin) == 0 {
					m.Begin = make([]go_gazette_dev_core_broker_protocol.Offset, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v go_gazette_dev_core_broker_protocol.Offset
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= go_gazette_dev_core_broker_protocol.Offset(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Begin = append(m.Begin, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
		case 9:
			if wireType == 0 {
				var v go_gazette_dev_core_broker_protocol.Offset
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= go_gazette_dev_core_broker_protocol.Offset(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.End = append(m.End, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.End) == 0 {
					m.End = make([]go_gazette_dev_core_broker_protocol.Offset, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v go_gazette_dev_core_broker_protocol.Offset
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= go_gazette_dev_core_broker_protocol.Offset(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.End = append(m.End, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UuidParts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UuidParts = append(m.UuidParts, UUIDParts{})
			if err := m.UuidParts[len(m.UuidParts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackedKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackedKey = append(m.PackedKey, Slice{})
			if err := m.PackedKey[len(m.PackedKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShuffleKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShuffleKey = append(m.ShuffleKey, Field{})
			if err := m.ShuffleKey[len(m.ShuffleKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arena", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arena = append(m.Arena[:0], dAtA[iNdEx:postIndex]...)
			if m.Arena == nil {
				m.Arena = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocsJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocsJson = append(m.DocsJson, Slice{})
			if err := m.DocsJson[len(m.DocsJson)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UuidPtr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UuidPtr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPtrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldPtrs = append(m.FieldPtrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arena", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arena = append(m.Arena[:0], dAtA[iNdEx:postIndex]...)
			if m.Arena == nil {
				m.Arena = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UuidParts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UuidParts = append(m.UuidParts, UUIDParts{})
			if err := m.UuidParts[len(m.UuidParts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CombineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CombineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CombineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CombineRequest_Open{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &CombineRequest_Open_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Continue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CombineRequest_Continue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &CombineRequest_Continue_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CombineRequest_Open) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Open: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Open: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPtr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPtr = append(m.KeyPtr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPtrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldPtrs = append(m.FieldPtrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UuidPlaceholderPtr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UuidPlaceholderPtr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CombineRequest_Continue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Continue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Continue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arena", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arena = append(m.Arena[:0], dAtA[iNdEx:postIndex]...)
			if m.Arena == nil {
				m.Arena = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocsJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocsJson = append(m.DocsJson, Slice{})
			if err := m.DocsJson[len(m.DocsJson)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CombineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CombineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CombineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arena", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arena = append(m.Arena[:0], dAtA[iNdEx:postIndex]...)
			if m.Arena == nil {
				m.Arena = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocsJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocsJson = append(m.DocsJson, Slice{})
			if err := m.DocsJson[len(m.DocsJson)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeriveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeriveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeriveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeriveRequest_Open{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &DeriveRequest_Open_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Continue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeriveRequest_Continue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &DeriveRequest_Continue_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeriveRequest_Flush{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &DeriveRequest_Flush_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prepare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeriveRequest_Prepare{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &DeriveRequest_Prepare_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeriveRequest_Open) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Open: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Open: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = Collection(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeriveRequest_Continue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Continue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Continue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arena", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arena = append(m.Arena[:0], dAtA[iNdEx:postIndex]...)
			if m.Arena == nil {
				m.Arena = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocsJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocsJson = append(m.DocsJson, Slice{})
			if err := m.DocsJson[len(m.DocsJson)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UuidParts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UuidParts = append(m.UuidParts, UUIDParts{})
			if err := m.UuidParts[len(m.UuidParts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackedKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackedKey = append(m.PackedKey, Slice{})
			if err := m.PackedKey[len(m.PackedKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TransformId = append(m.TransformId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TransformId) == 0 {
					m.TransformId = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TransformId = append(m.TransformId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TransformId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeriveRequest_Flush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UuidPlaceholderPtr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UuidPlaceholderPtr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPtrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldPtrs = append(m.FieldPtrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeriveRequest_Prepare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Prepare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Prepare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeriveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeriveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeriveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Continue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeriveResponse_Continue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &DeriveResponse_Continue_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CombineResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &DeriveResponse_Flush{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeriveResponse_Continue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Continue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Continue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlow = fmt.Errorf("proto: unexpected end of group")
)
